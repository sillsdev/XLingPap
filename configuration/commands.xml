<cfg:configuration name="XLingPaper" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:cfg="http://www.xmlmind.com/xmleditor/schema/configuration">
    <cfg:binding>
        <cfg:keyPressed code="ESCAPE"/>
        <cfg:charTyped char="C"/>
        <cfg:command name="insertCharByName" parameter=""/>
    </cfg:binding>
    <!-- following are customized cfg:commands written by hab -->
    <cfg:binding>
        <cfg:keyPressed code="F10" modifiers="shift"/>
        <cfg:command name="ConvertToWrdsOrGlossToAbbrRefs"/>
    </cfg:binding>
    <cfg:command name="ConvertToWrdsOrGlossToAbbrRefs">
        <cfg:macro>
            <cfg:choice>
                <cfg:command name="ConvertToWrds"/>
                <cfg:command name="ConvertAnyAbbreviationsInGlossToAbbrRef"/>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertAnyAbbreviationsInGlossToAbbrRef">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <!-- need to be abbreviations and currently needs to be in gloss  -->
                    <cfg:test context="//abbreviations" expression="abbreviation/abbrInLang/abbrTerm"/>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss item"/>
                    <!-- but not with a parent line element -->
                    <cfg:fail>
                        <cfg:command name="selectNode" parameter="parent[implicitElement] line"/>
                    </cfg:fail>
                </cfg:pass>
                <cfg:command name="ConvertAnyAbbreviationsToAbbrRefsCmd"/>
                <cfg:command name="moveDotTo" parameter="nextTextNode"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertToWrds">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <!-- needs to be in interlinear line and langData or gloss -->
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] line"/>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] langData gloss"/>
                    <!-- but not with a wrd element -->
                    <cfg:fail>
                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] wrd"/>
                    </cfg:fail>
                </cfg:pass>
                <!-- select the entire langData or gloss element and wrap it inside a wrd element -->
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] langData gloss"/>
                <cfg:choice>
                    <cfg:sequence>
                        <!--                    <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] object abbrRef"/>-->
                        <!--  -->
                        <!--                        <cfg:test context="$selectedElement" expression="descendant::object or descendant::abbrRef or descendant::endnote or descendant::endnoteRef or descendant::endnote"/>-->
                        <cfg:test context="$selectedElement" expression="descendant::*[name()='object' or name()='abbrRef' or name()='endnote' or name()='endnoteRef' or name()='citation' or name()='langData' or name()='gloss' or name()='exampleRef' or name()='sectionRef' or name()='appendixRef' or name()='comment' or name()='br' or name()='figureRef' or name()='tablenumberedRef' or name()='q' or name()='img' or name()='genericRef' or name()='genericTarget' or name()='link' or name()='indexedItem' or name()='indexedRangeBegin' or name()='indexedRangeEnd' or name()='interlinearRefCitation' or name()='mediaObject']"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but it is not possible to convert a line to wrd elements when there is an embedded element (e.g. object, endnote or abbrRef).  Please remove the embedded element(s) and try again."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.convertsToWrds"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] langData gloss"/>-->
                        <cfg:command name="wrap" parameter="[implicitElement] wrd"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <!-- normal case when have more than one word in the line -->
                                <cfg:pass>
                                    <cfg:command name="SelectNextWordToConvert"/>
                                </cfg:pass>
                                <cfg:command name="ReplaceNextWordWithWrd"/>
<!--  if you want it to recurse                              <cfg:command name="ConvertToWrds"/>-->
                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- exceptional case where have only one word in the line;  
                                    N.B. This is similar to what we have in  ConvertWordsToSequenceOfLangDataOrGlossInWrd, 
                                    but it differs in some crucial ways (we're in a wrd here, not a gloss, for one) -->
                                <cfg:sequence>
                                    <cfg:choice>
                                        <cfg:sequence>
                                            <cfg:command name="moveDotTo" parameter="nextTextNode"/>
                                            <cfg:command name="moveDotTo" parameter="previousTextNode"/>
                                            <cfg:pass>
                                                <!-- need to be abbreviations and currently needs to be in gloss  -->
                                                <cfg:test context="//abbreviations" expression="abbreviation/abbrInLang/abbrTerm"/>
                                                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss"/>
                                            </cfg:pass>
                                            <cfg:command name="ConvertAbbreviationsToAbbrRefsCmd"/>
                                        </cfg:sequence>
                                        <cfg:sequence>
                                            <!-- we need some kind of no-op here so processing does not stop -->
                                            <cfg:fail>
                                                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss"/>
                                            </cfg:fail>
                                            <!--                                                                            <cfg:command name="alert" parameter="Not in gloss"/>-->
                                        </cfg:sequence>
                                    </cfg:choice>
                                    <!-- Could not select the next word; are done.  Move the dot to the next text node in hopes this helps the user -->
                                    <cfg:command name="moveDotTo" parameter="nextTextNode"/>
                                    <!--  if you want it to recurse                              <cfg:command name="ConvertToWrds"/>-->
                                </cfg:sequence>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="InsertLangDataOrGloss">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:choice>
                <cfg:sequence>
                    <cfg:test context="$selectedElement" expression="name()='langData'"/>
                    <cfg:command name="insert" parameter="before[implicitElement] langData"/>
                </cfg:sequence>
                <cfg:sequence>
                    <cfg:command name="insert" parameter="before[implicitElement] gloss"/>
                </cfg:sequence>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertWordsToSequenceOfLangDataOrGlossInWrd">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <!-- needs to be in a langData element within a wrd element -->
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] wrd"/>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] langData gloss"/>
                </cfg:pass>
                <!-- dot is at end of most recently cut/pasted word; move to the next char which should be in the next langData -->
                <cfg:command name="moveDotTo" parameter="nextChar"/>
                <!-- make sure what's left starts with a space -->
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] langData gloss"/>
                <cfg:test expression="starts-with($selected, ' ')"/>
                <!-- cut this langData/gloss and move it to a new wrd element that follows the previous wrd element -->
                <!--                        <cfg:command name="alert" parameter="before cut second langData"/>-->
                <cfg:command name="cut"/>
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] wrd"/>
                <!-- following command inserts an embedded langData element presumably because langData is the first element in %embedded; in the DTD -->
                <cfg:command name="insert" parameter="after[implicitElement] wrd"/>
                <!--                        <cfg:command name="alert" parameter="after creation of next wrd"/>-->
                <!-- select the embedded langData and replace it with what was just cut -->
                <cfg:command name="selectNode" parameter="descendant[implicitElement] langData"/>
                <!--                        <cfg:command name="alert" parameter="after trying to select embedded langData"/>-->
                <cfg:command name="paste" parameter="to"/>
                <!--                        <cfg:command name="alert" parameter="after creation of next wrd with embedded (cut) langData"/>-->
                <!-- select the next word and cut it -->
                <cfg:choice>
                    <cfg:command name="ReplaceNextWordWithWrd"/>
                    <cfg:sequence>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:pass>
                                    <!-- need to be abbreviations and currently needs to be in gloss  -->
                                    <cfg:test context="//abbreviations" expression="abbreviation/abbrInLang/abbrTerm"/>
                                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss"/>
                                </cfg:pass>
                                <!--                                <cfg:command name="alert" parameter="in a gloss"/>-->
                                <cfg:command name="moveDotTo" parameter="nextTextNode"/>
                                <cfg:command name="moveDotTo" parameter="previousTextNode"/>
                                <cfg:command name="ConvertAbbreviationsToAbbrRefsCmd"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- we need some kind of no-op here so processing does not stop when in a langData element-->
                                <cfg:fail>
                                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss"/>
                                </cfg:fail>
                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- we need some kind of no-op here so processing does not stop when in a gloss, but there are no abbreviations-->
                                <cfg:pass>
                                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss"/>
                                </cfg:pass>
                            </cfg:sequence>
                        </cfg:choice>
                        <!-- Could not select the next word; are done.  Move the dot to the next text node in hopes this helps the user -->
                        <cfg:command name="moveDotTo" parameter="nextTextNode"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ReplaceNextWordWithWrd">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:sequence>
                <cfg:command name="SelectNextWordToConvert"/>
                <!--                        <cfg:command name="alert" parameter="before cut of next real word"/>-->
                <cfg:command name="cut"/>
                <!-- select what is left -->
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] langData gloss"/>
                <!--            <cfg:command name="alert" parameter="before set lang attr"/>-->
                <cfg:set variable="lang" expression="$implicitElement/@lang"/>
                <cfg:set variable="textafter" expression="$implicitElement/@textafter"/>
                <cfg:set variable="textbefore" expression="$implicitElement/@textbefore"/>
                <!-- insert new langData/gloss and paste the cut word into it; recurse -->
                <!--            <cfg:command name="alert" parameter="before InsertLangDataOrGloss"/>-->
                <cfg:command name="InsertLangDataOrGloss"/>
                <!--            <cfg:command name="alert" parameter="before trying to put lang attr"/>-->
                <!--            <cfg:get expression="$lang"/>
                <cfg:command name="alert" parameter="$lang = %_"/>-->
                <!-- putting the same value fails, so insert a fake one -->
                <cfg:command name="putAttribute" parameter="lang MeAFakeLanguageAttributexxx"/>
                <cfg:sequence>
                    <cfg:pass>
                        <cfg:get expression="$lang"/>
                        <cfg:command name="putAttribute" parameter="lang %_"/>
                    </cfg:pass>
                    <cfg:get expression="$lang"/>
                    <cfg:command name="putAttribute" parameter="lang %_"/>
                    <!--  </cfg:sequence>
                <cfg:sequence>-->
                    <cfg:choice>
                        <cfg:sequence>
                            <cfg:test expression="string-length($textafter) &gt; 0"/>
                            <cfg:get expression="$textafter"/>
                            <cfg:command name="putAttribute" parameter="textafter %_"/>
                        </cfg:sequence>
                    </cfg:choice>
                    <!--   </cfg:sequence>
                <cfg:sequence>-->
                    <cfg:choice>
                        <cfg:sequence>
                            <cfg:test expression="string-length($textbefore) &gt; 0"/>
                            <cfg:get expression="$textbefore"/>
                            <cfg:command name="putAttribute" parameter="textbefore %_"/>
                        </cfg:sequence>
                    </cfg:choice>
                </cfg:sequence>
                <!--            <cfg:command name="alert" parameter="before past into"/>-->
                <cfg:command name="paste" parameter="into"/>
                <cfg:command name="ConvertWordsToSequenceOfLangDataOrGlossInWrd"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="SelectNextWordToConvert">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:test expression="contains($selected, ' ')"/>
                </cfg:pass>
                <cfg:command name="search" parameter="' '"/>
                <cfg:command name="moveDotTo" parameter="previousChar"/>
                <cfg:command name="selectTo" parameter="textNodeBegin"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ChooseFontCmd">
        <cfg:class>xlingpaper.xxe.ChooseFontCmd</cfg:class>
    </cfg:command>
    <cfg:command name="SetTableSizeCmd">
        <cfg:class>xlingpaper.xxe.SetTableSizeCmd</cfg:class>
    </cfg:command>
    <!--
   <cfg:command name="TestDemoteCmd">
      <cfg:class>xlingpaper.xxe.DemoteCmd</cfg:class>
   </cfg:command>
-->
    <cfg:command name="ChooseColorCmd">
        <cfg:class>xlingpaper.xxe.ChooseColorCmd</cfg:class>
    </cfg:command>
    <cfg:command name="DeleteFileCmd">
        <cfg:class>xlingpaper.xxe.DeleteFile</cfg:class>
    </cfg:command>
    <cfg:command name="GetHighestCalibreBookIdCmd">
        <cfg:class>xlingpaper.xxe.GetHighestCalibreBookId</cfg:class>
    </cfg:command>
    <cfg:command name="GetAuthorsForCalibreCmd">
        <cfg:class>xlingpaper.xxe.GetAuthorsForCalibre</cfg:class>
    </cfg:command>
    <cfg:command name="AssociatePublisherStylesheetCmd">
        <cfg:class>xlingpaper.xxe.AssociatePublisherStylesheet</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertAbbreviationsToAbbrRefsCmd">
        <cfg:class>xlingpaper.xxe.ConvertLineGlossAbbreviationsToAbbrRefs</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertAnyAbbreviationsToAbbrRefsCmd">
        <cfg:class>xlingpaper.xxe.ConvertAnyAbbreviationsToAbbrRefs</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertEveryGlossAbbreviationToAbbrRefInSelectionCmd">
        <cfg:class>xlingpaper.xxe.ConvertEveryGlossAbbreviationToAbbrRefInSelection</cfg:class>
    </cfg:command>
    <cfg:command name="CheckPresenceOfFontsAndImagesCmd">
        <cfg:class>xlingpaper.xxe.CheckPresenceOfFontsAndImages</cfg:class>
    </cfg:command>
    <cfg:command name="RemovePublisherStylesheetCmd">
        <cfg:class>xlingpaper.xxe.RemovePublisherStylesheet</cfg:class>
    </cfg:command>
    <cfg:command name="GetXIncludesAndImageFilesCmd">
        <cfg:class>xlingpaper.xxe.GetXIncludesAndImageFiles</cfg:class>
    </cfg:command>
    <cfg:command name="CreateZipFileCmd">
        <cfg:class>xlingpaper.xxe.CreateZipFile</cfg:class>
    </cfg:command>
    <cfg:command name="FLExExportRemoveHomographNumbers">
        <cfg:class>xlingpaper.xxe.RemoveFLExExportHomographNumbers</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertFileNameForXeLaTeXCmd">
        <cfg:class>xlingpaper.xxe.ConvertFileNameForXeLaTeX</cfg:class>
    </cfg:command>
    <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd">
        <cfg:class>xlingpaper.xxe.RemoveExtraDoubleQuotesFromPickLabels</cfg:class>
    </cfg:command>
    <cfg:command name="changeLangAttributesInDocumentCmd">
        <cfg:class>xlingpaper.xxe.ChangeLangAttributesInDocument</cfg:class>
    </cfg:command>
    <cfg:command name="changeDefaultLangAttributesInTemplatesCmd">
        <cfg:class>xlingpaper.xxe.ChangeDefaultLangAttributesInTemplates</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertCollectionToCitationCmd">
        <cfg:class>xlingpaper.xxe.ConvertCollectionToCitation</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertProceedingsToCitationCmd">
        <cfg:class>xlingpaper.xxe.ConvertProceedingsToCitation</cfg:class>
    </cfg:command>
    <cfg:command name="ConvertFileNameToURICmd">
        <cfg:class>xlingpaper.xxe.ConvertFileNameToURI</cfg:class>
    </cfg:command>
    <cfg:command name="LocalizeString">
        <cfg:class>xlingpaper.xxe.LocalizeString</cfg:class>
    </cfg:command>
    <cfg:command name="GetHtmlTableFromClipboardCmd">
        <cfg:class>xlingpaper.xxe.GetHtmlTableFromClipboard</cfg:class>
    </cfg:command>
    <cfg:command name="SetHtmlTableToClipboardCmd">
        <cfg:class>xlingpaper.xxe.SetHtmlTableToClipboard</cfg:class>
    </cfg:command>
    <!-- no longer needed because XXE now has Search / Bookmarks
   <cfg:binding>
      <cfg:keyPressed code="F6"/>
      <cfg:command name="SetMarkCmd"/>
   </cfg:binding>
   <cfg:binding>
      <cfg:keyPressed code="F6" modifiers="shift"/>
      <cfg:command name="MoveToMarkCmd"/>
   </cfg:binding>
   <cfg:command name="SetMarkCmd">
      <cfg:class>xlingpaper.xxe.SetMarkCmd</cfg:class>
   </cfg:command>
   <cfg:command name="MoveToMarkCmd">
      <cfg:class>xlingpaper.xxe.MoveToMarkCmd</cfg:class>
   </cfg:command>
-->
    <cfg:binding>
        <cfg:keyPressed code="F7" modifiers="shift"/>
        <cfg:command name="demoteSelectionCmd"/>
    </cfg:binding>
    <cfg:command name="demoteSelectionCmd">
        <cfg:macro undoable="true" repeatable="true" trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] chapter section1"/>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] p example ul ol pc hangingIndent blockquote dl table chart tree interlinear-text"/>
                </cfg:pass>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] section6"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but it is not possible to demote anything while in a section6 element."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.demoteSelection"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:fail>
                            <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] section6"/>
                        </cfg:fail>
                        <cfg:command name="cut" parameter="[implicit_selection]"/>
                        <cfg:choice>
                            <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] p example ul ol pc hangingIndent blockquote dl table chart tree interlinear-text"/>
                            <cfg:command name="undo"/>
                        </cfg:choice>
                        <cfg:command name="selectNode" parameter="lastSibling"/>
                        <cfg:command name="insertNewSubsectionAndPasteCmd"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="insertNewSubsectionAndPasteCmd">
        <cfg:macro trace="false">
            <cfg:sequence>
                <!-- first insert appropriate subsection -->
                <cfg:choice>
                    <cfg:command name="insert" parameter="after[implicitNode] #template(section1,p)"/>
                    <cfg:command name="insert" parameter="after[implicitNode] #template(section2,p)"/>
                    <cfg:command name="insert" parameter="after[implicitNode] #template(section3,p)"/>
                    <cfg:command name="insert" parameter="after[implicitNode] #template(section4,p)"/>
                    <cfg:command name="insert" parameter="after[implicitNode] #template(section5,p)"/>
                    <cfg:command name="insert" parameter="after[implicitNode] #template(section6,p)"/>
                    <!-- probably do not need the following undo since we are rather assured of having selected appropriate element now -->
                    <cfg:command name="undo"/>
                </cfg:choice>
                <!-- now select the p node and replace it with what is in the clipboard -->
                <cfg:command name="selectNode" parameter="lastChild"/>
                <cfg:choice>
                    <cfg:command name="paste" parameter="toOrInto"/>
                    <cfg:sequence>
                        <cfg:command name="undo"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but the selected item(s) cannot be demoted as they have been selected.  If you are trying to demote the last element in the section, you may need to click on its name in the node path bar and then execute this command again."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.insertNewSubsectionAndPaste"/>
                        <cfg:command name="alert" parameter="%_"/>
                        <!--                        <cfg:command name="alert" parameter="Or you can insert an empty paragraph (element p) after the last element and then do your selection and this command again."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.insertNewSubsectionAndPaste2"/>
                        <cfg:command name="alert" parameter="%_"/>
                        <!-- need another undo if this is the final section in the document -->
                        <cfg:command name="undo"/>
                    </cfg:sequence>
                </cfg:choice>
                <!-- finally, put dot in the secTitle element so user can start typing there and make sure the subsection is expanded -->
                <cfg:command name="moveDotTo" parameter="previousChar"/>
                <cfg:command name="toggleCollapsed" parameter="expand"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="demoteCmd">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:match context="$selected" pattern="*[descendant-or-self::section6]"/>
                        <cfg:command name="LocalizeString" parameter="msg.demote"/>
                        <cfg:command name="alert" parameter="%_"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but it is not possible to demote anything containing a section6 element. You will need to rework any section6 elements into their respective section5 elements before demoting is possible."/>-->
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:match context="$selected" pattern="chapter | section1 | section2 | section3  | section4 | section5"/>
                        <cfg:command name="extractObject" parameter="- XML %T"/>
                        <cfg:command name="getDemotedSections" parameter="%_"/>
                        <cfg:set variable="stuff" plainString="true" expression="%_"/>
                        <cfg:set variable="clipboard" expression="$stuff"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getDemotedSections" parameter="$*">
        <cfg:process showProgress="false">
            <cfg:transform cacheStylesheet="true" file="%*" stylesheet="../transforms/DemoteSection.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="promoteCmd">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test context="$selected" expression="name(.)='section1' and count(//chapter) = 0 and count(//chapterInCollection) = 0"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but it is not possible to promote a section1 when there are no chapters."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.promote"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:match context="$selected" pattern="section1 | section2 | section3 | section4 | section5 | section6"/>
                        <cfg:command name="extractObject" parameter="- XML %T"/>
                        <cfg:command name="getPromotedSections" parameter="%_"/>
                        <cfg:set variable="stuff" plainString="true" expression="%_"/>
                        <cfg:set variable="clipboard" expression="$stuff"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getPromotedSections" parameter="$*">
        <cfg:process showProgress="false">
            <cfg:transform cacheStylesheet="true" file="%*" stylesheet="../transforms/PromoteSection.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <!-- 
========================================
Borrowed from xhtml 
========================================
-->
    <!-- Inside a p (and only inside a p), XXE attempts to behave 
       like a word-processor. -->
    <cfg:binding>
        <cfg:keyPressed code="ENTER"/>
        <cfg:command name="xhtml.splitOrInsertNewLine"/>
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="DELETE"/>
        <cfg:command name="xhtml.joinOrDeleteChar"/>
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="BACK_SPACE"/>
        <cfg:command name="xhtml.joinOrDeleteChar" parameter="backwards"/>
    </cfg:binding>
    <cfg:command name="xhtml.splitOrInsertNewLine">
        <cfg:macro>
            <cfg:choice>
                <cfg:command name="insertControlChar" parameter="\n"/>
                <cfg:sequence>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] p pc hangingIndent li"/>
                    <cfg:command name="split"/>
                </cfg:sequence>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="xhtml.joinOrDeleteChar">
        <cfg:macro>
            <cfg:choice>
                <cfg:sequence>
                    <cfg:test expression="$dot/ancestor::p and not($selected) and not($mark) or $dot/ancestor::pc and not($selected) and not($mark) or $dot/ancestor::li and not($selected) and not($mark) or $dot/ancestor::hangingIndent and not($selected) and not($mark)"/>
                    <cfg:command name="deleteSelectionOrJoinOrDeleteChar" parameter="%0"/>
                </cfg:sequence>
                <cfg:command name="deleteSelectionOrDeleteChar" parameter="%0"/>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <!-- Easy way to add p, li, dt+dd -->
    <cfg:binding>
        <cfg:keyPressed code="ENTER" modifiers="mod"/>
        <cfg:command name="xhtml.appendSame"/>
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="ENTER" modifiers="mod shift"/>
        <cfg:command name="xhtml.prependSame"/>
    </cfg:binding>
    <cfg:command name="xhtml.appendSame">
        <cfg:macro>
            <cfg:choice>
                <cfg:sequence>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] p"/>
                    <cfg:command name="insertNode" parameter="sameElementAfter"/>
                </cfg:sequence>
                <cfg:command name="xhtml.appendListItem"/>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="xhtml.prependSame">
        <cfg:macro>
            <cfg:choice>
                <cfg:sequence>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] p"/>
                    <cfg:command name="insertNode" parameter="sameElementBefore"/>
                </cfg:sequence>
                <cfg:command name="xhtml.prependListItem"/>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="xhtml.appendListItem">
        <cfg:macro label="Add li or dt+dd" undoable="true">
            <cfg:sequence>
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] li dd dt"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:match context="$selected" pattern="li"/>
                        <cfg:command name="insertNode" parameter="sameElementAfter"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!-- Match dd|dt -->
                        <!-- Assumes that a dt is followed by a dd. -->
                        <cfg:choice>
                            <cfg:match context="$selected" pattern="dd"/>
                            <cfg:command name="selectNode" parameter="nextSibling dd"/>
                        </cfg:choice>
                        <cfg:command name="insert" parameter="after dt"/>
                        <cfg:command name="insert" parameter="after dd"/>
                        <cfg:command name="selectNode" parameter="previousSibling"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="xhtml.prependListItem">
        <cfg:macro label="Add li or dt+dd" undoable="true">
            <cfg:sequence>
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] li dd dt"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:match context="$selected" pattern="li"/>
                        <cfg:command name="insertNode" parameter="sameElementBefore"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!-- Match dd|dt -->
                        <!-- Assumes that a dt is followed by a dd. -->
                        <cfg:choice>
                            <cfg:match context="$selected" pattern="dt"/>
                            <cfg:command name="selectNode" parameter="previousSibling dt"/>
                        </cfg:choice>
                        <cfg:command name="insert" parameter="before dd"/>
                        <cfg:command name="insert" parameter="before dt"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <!-- An easy way to insert a br -->
    <cfg:binding>
        <cfg:keyPressed code="ENTER" modifiers="shift"/>
        <cfg:command name="xhtml.insertLineBreak"/>
    </cfg:binding>
    <cfg:command name="xhtml.insertLineBreak">
        <cfg:macro label="Insert br" undoable="true">
            <cfg:sequence>
                <cfg:command name="insert" parameter="into br"/>
                <!-- harmless if macro fails starting from here -->
                <cfg:command name="insertNode" parameter="textAfter"/>
                <cfg:command name="cancelSelection"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <!--
Other stuff
-->
    <cfg:binding>
        <!--
  <cfg:keyPressed code="QUOTE" modifiers="shift alt" />
alt causes menu to be selected
-->
        <cfg:keyPressed code="ESCAPE"/>
        <cfg:charTyped char="&quot;"/>
        <cfg:command name="insertString" parameter="”"/>
        <!-- right double quotation mark -->
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="QUOTE" modifiers="shift ctrl"/>
        <cfg:command name="insertString" parameter="“"/>
        <!-- left double quotation mark -->
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="ESCAPE"/>
        <cfg:charTyped char="'"/>
        <!--
  <cfg:keyPressed code="QUOTE" modifiers="alt" />
alt causes menu to be selected
-->
        <cfg:command name="insertString" parameter="’"/>
        <!-- right single quotation mark -->
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="QUOTE" modifiers="ctrl"/>
        <cfg:command name="insertString" parameter="‘"/>
        <!-- left single quotation mark -->
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="shift"/>
        <cfg:command name="insertThenSetReference"/>
    </cfg:binding>
    <cfg:command name="insertThenSetReference">
        <cfg:macro undoable="true">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:pass>
                            <cfg:command name="insert" parameter="into abbrRef"/>
                        </cfg:pass>
                        <cfg:command name="LocalizeString" parameter="msg.insertReferenceElement"/>
                        <cfg:command name="pick" parameter="'%_' false abbrRef appendixRef citation endnoteRef exampleRef figureRef genericRef gloss glossaryTermRef indexedItem indexedRangeBegin indexedRangeEnd interlinearRefCitation iso639-3codeRef langData object sectionRef tablenumberedRef"/>
                        <cfg:command name="insert" parameter="into %_"/>
                        <cfg:command name="setReference"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:pass>
                            <cfg:command name="insert" parameter="into sectionRef"/>
                        </cfg:pass>
                        <cfg:command name="LocalizeString" parameter="msg.insertReferenceElement"/>
                        <cfg:command name="pick" parameter="'%_' false appendixRef citation endnoteRef exampleRef figureRef genericRef gloss indexedItem indexedRangeBegin indexedRangeEnd interlinearRefCitation iso639-3codeRef langData object sectionRef tablenumberedRef"/>
                        <cfg:command name="insert" parameter="into %_"/>
                        <cfg:command name="setReference"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="alt ctrl shift"/>
        <cfg:command name="insertThenSetReferenceRange"/>
    </cfg:binding>
    <cfg:command name="insertThenSetReferenceRange">
        <cfg:macro undoable="true" trace="false">
            <cfg:sequence>
                <cfg:sequence>
                    <cfg:pass>
                        <cfg:command name="insert" parameter="into sectionRef"/>
                    </cfg:pass>
                    <cfg:command name="LocalizeString" parameter="msg.insertReferenceElementRange"/>
                    <cfg:command name="pick" parameter="'%_' false appendixRef exampleRef figureRef interlinearRefCitation sectionRef tablenumberedRef"/>
                    <cfg:set variable="element" expression="%_" plainString="true"/>
                    <cfg:get expression="$element"/>
                    <cfg:command name="insert" parameter="into %_"/>
                    <cfg:command name="LocalizeString" parameter="msg.insertReferenceElementRangeInitial"/>
                    <cfg:command name="setReference" parameter="'%_'"/>
                    <cfg:choice>
                        <cfg:command name="putAttribute" parameter="[implicitElement] paren initial"/>
                        <cfg:command name="putAttribute" parameter="[implicitElement] bracket initial"/>
                        <!-- following is a kind of a no-op to make sure the choice succeeds; is there a better way? -->
                        <cfg:get expression="$element"/>
                    </cfg:choice>
                    <!--                        <cfg:command name="alert" parameter="Before insertNode"/>-->
                    <cfg:command name="insertTextOrMoveDot" parameter="after"/>
                    <!--                        <cfg:command name="alert" parameter="Before insertString"/>-->
                    <cfg:command name="insertString" parameter="–"/>
                    <!--                        <cfg:command name="alert" parameter="Before get $element"/>-->
                    <cfg:get expression="$element"/>
                    <cfg:command name="insert" parameter="into %_"/>
                    <cfg:command name="LocalizeString" parameter="msg.insertReferenceElementRangeFinal"/>
                    <cfg:command name="setReference" parameter="'%_'"/>
                    <cfg:choice>
                        <cfg:sequence>
                            <cfg:command name="putAttribute" parameter="[implicitElement] paren final"/>
                            <cfg:command name="putAttribute" parameter="[implicitElement] letterOnly yes"/>
                        </cfg:sequence>
                        <cfg:sequence>
                            <cfg:command name="putAttribute" parameter="[implicitElement] bracket final"/>
                            <cfg:command name="putAttribute" parameter="[implicitElement] lineNumberOnly yes"/>
                        </cfg:sequence>
                        <cfg:command name="putAttribute" parameter="[implicitElement] textBefore none"/>
                        <!-- following is a kind of a no-op to make sure the choice succeeds; is there a better way? -->
                        <cfg:get expression="$element"/>
                    </cfg:choice>
                </cfg:sequence>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11"/>
        <cfg:command name="setReference"/>
    </cfg:binding>
    <cfg:command name="setReference">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:command name="setAbbreviation"/>
                    <cfg:command name="setAppendix" parameter="%0"/>
                    <cfg:command name="setCitation"/>
                    <cfg:command name="setExample" parameter="%0"/>
                    <cfg:command name="setLanguage"/>
                    <cfg:command name="setSection" parameter="%0"/>
                    <cfg:command name="setEndnote"/>
                    <cfg:command name="setIndexSee"/>
                    <cfg:command name="setIndex"/>
                    <cfg:command name="setIndexedRangeBegin"/>
                    <cfg:command name="setGenericRef"/>
                    <cfg:command name="setImageSource"/>
                    <cfg:command name="setInterlinearRef" parameter="%0"/>
                    <cfg:command name="setFigureRef" parameter="%0"/>
                    <cfg:command name="setTableNumberedRef" parameter="%0"/>
                    <cfg:command name="setCollOrProcCitation"/>
                    <cfg:command name="setAuthorContactInfo"/>
                    <cfg:command name="setFramedType"/>
                    <!--MRL Swapped priority of type and contentType after adding contentType to object -->
                    <cfg:command name="setType"/>
                    <cfg:command name="setContentType"/>
                    <cfg:command name="setGlossaryTerm"/>
                    <cfg:command name="setAnnotation"/>
                    <cfg:command name="setAnnotatedBibliographyType"/>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setAbbreviation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] abbrRef"/>
                </cfg:pass>
                <cfg:set variable="chapterInCollectionId" expression="ancestor::chapterInCollection[backMatter/abbreviations]/@id" context="$implicitElement"/>
                <!--<cfg:get expression="$chapterInCollectionId"/>
                <cfg:command name="alert" parameter="%_"/>-->
                <cfg:get expression="$chapterInCollectionId"/>
                <cfg:command name="getAbbreviationTermsandIds" parameter="%_"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Abbreviation' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] abbr %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getAbbreviationTermsandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetAbbreviationTermsAndIds.xsl" to="out.xml">
                <cfg:parameter name="chapterInCollectionId">%0</cfg:parameter>
            </cfg:transform>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setAppendix">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] appendixRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] app"/>-->
                </cfg:pass>
                <cfg:choice>
                    <!--<cfg:sequence>
                        <cfg:test expression="'%0' = 'Initial'"/>
                        <cfg:command name="getAppendixTitlesandIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Initial Appendix' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Final'"/>
                        <cfg:command name="getAppendixTitlesandIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Final Appendix' true %_"/>
                    </cfg:sequence>-->
                    <cfg:sequence>
                        <cfg:test expression="'%0' != ''"/>
                        <cfg:command name="getAppendixTitlesandIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'%0 Appendix' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="getAppendixTitlesandIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Appendix' true %_"/>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:command name="putAttribute" parameter="[implicitElement] app %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getAppendixTitlesandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetAppendixTitlesAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setAuthorContactInfo">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] authorContactInfo"/>
                </cfg:pass>
                <cfg:command name="getAuthorContactInfoandIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Author Contact Info' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] author %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getAuthorContactInfoandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetAuthorContactInfoAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setCitation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] citation"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] ref"/>-->
                </cfg:pass>
                <cfg:set variable="chapterInCollectionId" expression="ancestor::chapterInCollection[backMatter/references]/@id" context="$implicitElement"/>
                <!--<cfg:get expression="$chapterInCollectionId"/>
                    <cfg:command name="alert" parameter="%_"/>-->
                <cfg:get expression="$chapterInCollectionId"/>
                <cfg:command name="getRefWorkTitlesandIds" parameter="%_"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="Citation true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] ref %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getRefWorkTitlesandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetRefWorkTitlesAndIds.xsl" to="out.xml">
                <cfg:parameter name="chapterInCollectionId">%0</cfg:parameter>
            </cfg:transform>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setCollOrProcCitation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] collCitation procCitation"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] ref"/>-->
                </cfg:pass>
                <cfg:command name="getRefBookTitlesandIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Book Citation' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] refToBook %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getRefBookTitlesandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetRefBookTitlesAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setEndnote">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] endnoteRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] note"/>-->
                </cfg:pass>
                <cfg:get expression="join(//endnote/@id, ' ')"/>
                <cfg:command name="pick" parameter="Endnote false %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] note %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setExample">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] exampleRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] num"/>-->
                </cfg:pass>
                <cfg:choice>
                    <!--<cfg:sequence>
                        <cfg:test expression="'%0' = 'Initial'"/>
                        <cfg:get expression="join(//example/@num | //listWord/@letter | //listSingle/@letter | //listInterlinear/@letter | //listDefinition/@letter | //lineSet/@letter, ' ')"/>
                        <cfg:command name="pick" parameter="'Initial Example' false %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Final'"/>
                        <cfg:get expression="join(//example/@num | //listWord/@letter | //listSingle/@letter | //listInterlinear/@letter | //listDefinition/@letter | //lineSet/@letter, ' ')"/>
                        <cfg:command name="pick" parameter="'Final Example' false %_"/>
                    </cfg:sequence>-->
                    <cfg:sequence>
                        <cfg:test expression="'%0' != ''"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:test expression="$selectedElement/ancestor::framedUnit"/>
                                <cfg:get expression="join($selectedElement/ancestor::framedUnit//example/@num | $selectedElement/ancestor::framedUnit//listWord/@letter | $selectedElement/ancestor::framedUnit//listSingle/@letter | $selectedElement/ancestor::framedUnit//listInterlinear/@letter | $selectedElement/ancestor::framedUnit//listDefinition/@letter | $selectedElement/ancestor::framedUnit//lineSet/@letter, ' ')"/>
                                <cfg:command name="pick" parameter="'%0 Example' false %_"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <cfg:get expression="join(//example[not(ancestor::framedUnit)]/@num | //listWord[not(ancestor::framedUnit)]/@letter | //listSingle[not(ancestor::framedUnit)]/@letter | //listInterlinear[not(ancestor::framedUnit)]/@letter | //listDefinition[not(ancestor::framedUnit)]/@letter | //lineSet[not(ancestor::framedUnit)]/@letter, ' ')"/>
<!--                                <cfg:command name="getExampleNumbersAndIds"/>-->
                                <cfg:command name="pick" parameter="'%0 Example' false %_"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:test expression="$selectedElement/ancestor::framedUnit"/>
                                <cfg:get expression="join($selectedElement/ancestor::framedUnit//example/@num | $selectedElement/ancestor::framedUnit//listWord/@letter | $selectedElement/ancestor::framedUnit//listSingle/@letter | $selectedElement/ancestor::framedUnit//listInterlinear/@letter | $selectedElement/ancestor::framedUnit//listDefinition/@letter | $selectedElement/ancestor::framedUnit//lineSet/@letter, ' ')"/>
                                <cfg:command name="pick" parameter="Example false %_"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <cfg:get expression="join(//example[not(ancestor::framedUnit)]/@num | //listWord[not(ancestor::framedUnit)]/@letter | //listSingle[not(ancestor::framedUnit)]/@letter | //listInterlinear[not(ancestor::framedUnit)]/@letter | //listDefinition[not(ancestor::framedUnit)]/@letter | //lineSet[not(ancestor::framedUnit)]/@letter, ' ')"/>
<!--                                <cfg:command name="getExampleNumbersAndIds"/>-->
                                <cfg:command name="pick" parameter="Example false %_"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:set expression="%_" plainString="true" variable="chosenId"/>
                <!-- if the newly chosen value is the same as what's in num, letter never gets changed.
                So we put junk into num first in an attempt to have both get set correctly. -->
                <cfg:command name="putAttribute" parameter="[implicitElement] num 'XlingPaperJUNKTtempMessIHopeNoOneEverUsesThisIdForReal"/>
                <cfg:get expression="$chosenId"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] num %_"/>
                <cfg:get expression="$chosenId"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] letter %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ShowExampleNumberAndIds">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] exampleRef"/>
                </cfg:pass>
                <cfg:sequence>
                    <cfg:choice>
                        <cfg:sequence>
                            <cfg:test expression="$selectedElement/ancestor::framedUnit"/>
                            <cfg:get expression="join($selectedElement/ancestor::framedUnit//example/@num | $selectedElement/ancestor::framedUnit//listWord/@letter | $selectedElement/ancestor::framedUnit//listSingle/@letter | $selectedElement/ancestor::framedUnit//listInterlinear/@letter | $selectedElement/ancestor::framedUnit//listDefinition/@letter | $selectedElement/ancestor::framedUnit//lineSet/@letter, ' ')"/>
                            <cfg:command name="pick" parameter="Example false %_"/>
                        </cfg:sequence>
                        <cfg:sequence>
                            <cfg:command name="getExampleNumbersAndIds"/>
                            <cfg:command name="pick" parameter="Example true %_"/>
                        </cfg:sequence>
                    </cfg:choice>
                </cfg:sequence>
                <cfg:set expression="%_" plainString="true" variable="chosenId"/>
                <!-- if the newly chosen value is the same as what's in num, letter never gets changed.
                    So we put junk into num first in an attempt to have both get set correctly. -->
                <cfg:command name="putAttribute" parameter="[implicitElement] num 'XlingPaperJUNKTtempMessIHopeNoOneEverUsesThisIdForReal"/>
                <cfg:get expression="$chosenId"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] num %_"/>
                <cfg:get expression="$chosenId"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] letter %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getExampleNumbersAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform cacheStylesheet="true" file="in2.xml" stylesheet="../transforms/GetExampleNumbersAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <!-- Failed attempt to set only @num or only @letter depending on the result of the pick
  <cfg:command name="setExample">
      <cfg:macro>
          <cfg:sequence>
              <cfg:pass>
                  <cfg:command name="putAttribute" parameter="[implicitElement] num"/>
              </cfg:pass>
              <cfg:get expression="join(//example/@num | //listWord/@letter | //listSingle/@letter | //listInterlinear/@letter | //lineSet/@letter, ' ')"/>
              <cfg:command name="pick" parameter="Example false %_"/>
              <cfg:set variable="chosenId" expression="%_" plainString="true"/>
              <cfg:sequence>
                <cfg:pass>
                  <cfg:get expression="$chosenId" />
                  <cfg:match context="$selected" pattern="//example[@num=%-]" /> match: if the node specified by context is in the pattern 
                  <cfg:test expression="//example[@num=%_]" />
                </cfg:pass>
                <cfg:get expression="$chosenId" />
                <cfg:command name="putAttribute" parameter="[implicitElement] num %_"/>
              </cfg:sequence>
              <cfg:sequence>
                <cfg:pass>
                  <cfg:get expression="$chosenId" />
                  <cfg:command name="selectNode" parameter="//listWord[ @letter = %_ ] | //listSingle[ @letter = %_ ] | //listInterlinear[ @letter = %_ ] | //lineSet[ @letter = %_ ]"/>
                </cfg:pass>
                <cfg:get expression="$chosenId" />
                <cfg:command name="putAttribute" parameter="[implicitElement] letter %_"/>
              </cfg:sequence>
          </cfg:sequence>
      </cfg:macro>
  </cfg:command>
-->
    <cfg:command name="setFigureRef">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] figureRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] lang"/>-->
                </cfg:pass>
                <cfg:choice>
                    <!--<cfg:sequence>
                        <cfg:test expression="'%0' = 'Initial'"/>
                        <cfg:command name="getFigureCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Initial Figure' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Final'"/>
                        <cfg:command name="getFigureCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Final Figure' true %_"/>
                    </cfg:sequence>-->
                    <cfg:sequence>
                        <cfg:test expression="'%0' != ''"/>
                        <cfg:command name="getFigureCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'%0 Figure' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="getFigureCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="Figure true %_"/>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:command name="putAttribute" parameter="[implicitElement] figure %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getFigureCaptionsAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetFigureCaptionsAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setFramedType">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] framedUnit"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] note"/>-->
                </cfg:pass>
                <cfg:get expression="join(//framedType/@id, ' ')"/>
                <cfg:command name="pick" parameter="'Framed Type' false %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] framedtype %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setGenericRef">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] genericRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] gref"/>-->
                </cfg:pass>
                <cfg:get expression="join(//*[name()!='language']/@id | //example/@num | //listWord/@letter | //listSingle/@letter | //listInterlinear/@letter | //lineSet/@letter | //interlinear/@text[string-length(.) != 0], ' ')"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Generic Reference' false %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] gref %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setIndex">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] indexedItem indexedRangeBegin"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] term"/>-->
                </cfg:pass>
                <cfg:command name="getIndexTermsAndIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Index Terms' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] term %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setIndexSee">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] indexTerm"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] see"/>-->
                </cfg:pass>
                <cfg:command name="getIndexTermsAndIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Index Terms' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] see %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getIndexTermsAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetIndexTermsAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setIndexedRangeBegin">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] indexedRangeEnd"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] begin"/>-->
                </cfg:pass>
                <cfg:get expression="join(//indexedRangeBegin/@id, ' ')"/>
                <cfg:command name="pick" parameter="'Indexed Range Begin' false %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] begin %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setImageSource">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="putAttribute" parameter="[implicitElement] src"/>
                </cfg:pass>
                <cfg:command name="selectFile" parameter="[Select Image File]openFile"/>
                <cfg:get expression="relativize-uri(uri-or-file-name('%_'), '%{d}')"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] src %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setInterlinearRef">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] interlinearRef interlinearRefCitation"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] textref"/>-->
                </cfg:pass>
                <cfg:choice>
                    <!--<cfg:sequence>
                        <cfg:test expression="'%0' = 'Initial'"/>
                        <cfg:command name="getInterlinearTextAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Initial Interlinear Text' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Final'"/>
                        <cfg:command name="getInterlinearTextAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Final Interlinear Text' true %_"/>
                    </cfg:sequence>-->
                    <cfg:sequence>
                        <cfg:test expression="'%0' != ''"/>
                        <cfg:command name="getInterlinearTextAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'%0 Interlinear Text' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="getInterlinearTextAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Interlinear Text' true %_"/>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:command name="putAttribute" parameter="[implicitElement] textref %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getInterlinearTextAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="..%{S}transforms%{S}GetInterlinearTextAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setLanguage">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] langData gloss wrd item index free prose-text abbrInLang glossaryTermInLang iso639-3codeRef term seeDefinition"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] lang"/>-->
                </cfg:pass>
                <cfg:get expression="join(//language/@id, ' ')"/>
                <cfg:command name="pick" parameter="Language false %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] lang %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setSection">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] sectionRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] sec"/>-->
                </cfg:pass>
                <cfg:choice>
                    <!--                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Initial'"/>
                        <cfg:command name="getSectionTitlesandIds"/>
                        <cfg:command name="pick" parameter="'Initial Section, Chapter, or Part' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Final'"/>
                        <cfg:command name="getSectionTitlesandIds"/>
                        <cfg:command name="pick" parameter="'Final Section, Chapter, or Part' true %_"/>
                    </cfg:sequence>
-->
                    <cfg:sequence>
                        <cfg:test expression="'%0' != ''"/>
                        <cfg:command name="getSectionTitlesandIds"/>
                        <cfg:command name="pick" parameter="'%0 Section, Chapter, or Part' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="getSectionTitlesandIds"/>
                        <cfg:command name="pick" parameter="'Section, Chapter, or Part' true %_"/>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:command name="putAttribute" parameter="[implicitElement] sec %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getSectionTitlesandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetSecTitlesAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setTableNumberedRef">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] tablenumberedRef"/>
                    <!--               <cfg:command name="putAttribute" parameter="[implicitElement] lang"/>-->
                </cfg:pass>
                <cfg:choice>
                    <!--<cfg:sequence>
                        <cfg:test expression="'%0' = 'Initial'"/>
                        <cfg:command name="getTableNumberedCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Initial Table' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="'%0' = 'Final'"/>
                        <cfg:command name="getTableNumberedCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'Final Table' true %_"/>
                    </cfg:sequence>-->
                    <cfg:sequence>
                        <cfg:test expression="'%0' != ''"/>
                        <cfg:command name="getTableNumberedCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="'%0 Table' true %_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="getTableNumberedCaptionsAndIds"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="Table true %_"/>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:command name="putAttribute" parameter="[implicitElement] table %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getTableNumberedCaptionsAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetTableNumberedCaptionsAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setType">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="putAttribute" parameter="[implicitElement] type"/>
                </cfg:pass>
                <cfg:get expression="join(//type/@id, ' ')"/>
                <cfg:command name="pick" parameter="Type false %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] type %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="setGlossaryTerm">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="self[implicitElement] glossaryTermRef"/>
                </cfg:pass>
                <cfg:set variable="chapterInCollectionId" expression="ancestor::chapterInCollection[backMatter/glossaryTerms]/@id" context="$implicitElement"/>
                <!--<cfg:get expression="$chapterInCollectionId"/>
                    <cfg:command name="alert" parameter="%_"/>-->
                <cfg:get expression="$chapterInCollectionId"/>
                <cfg:command name="getGlossaryTermsandIds" parameter="%_"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Glossary Term' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] glossaryTerm %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getGlossaryTermsandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetGlossaryTermsAndIds.xsl" to="out.xml">
                <cfg:parameter name="chapterInCollectionId">%0</cfg:parameter>
            </cfg:transform>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setAnnotation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="putAttribute" parameter="[implicitElement] annotation"/>
                </cfg:pass>
                <cfg:command name="getRefWorkTitlesandIds" parameter="%_"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="Citation true %_"/>
                <cfg:set variable="refWork" expression="%_" plainString="true"/>
                <!-- we put in a bad citation value to avoid the macro from stopping when the new value is the same as the old value -->
                <cfg:command name="putAttribute" parameter="[implicitElement] citation 'r'"/>                
                <cfg:get expression="$refWork"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] citation %_"/>
                <cfg:get expression="$refWork"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="not(//refWork[@id='%_']/descendant-or-self::annotations/annotation)"/>
                        <cfg:command name="LocalizeString" parameter="msg.refWorkHasNoAnnotations"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="getAnnotationsForRefWorkandIds" parameter="%_"/>
                        <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                        <cfg:command name="pick" parameter="Annotation true %_"/>
                        <cfg:command name="putAttribute" parameter="[implicitElement] annotation %_"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getAnnotationsForRefWorkandIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetAnnotationsForRefWorkAndIds.xsl" to="out.xml">
                <cfg:parameter name="refWorkId">%0</cfg:parameter>
            </cfg:transform>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setAnnotatedBibliographyType">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="putAttribute" parameter="[implicitElement] annotype"/>
                </cfg:pass>
                <cfg:command name="getAnnotatedBibliographyTypesAndIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Annotated Bibliography Type' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] annotype %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getAnnotatedBibliographyTypesAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetAnnotatedBibliographyTypesAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="setContentType">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="putAttribute" parameter="[implicitElement] contentType"/>
                </cfg:pass>
                <cfg:command name="getContentTypesAndIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Content Type' true %_"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] contentType %_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="getContentTypesAndIds">
        <cfg:process showProgress="false">
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="../transforms/GetContentTypesAndIds.xsl" to="out.xml"/>
            <cfg:read encoding="UTF-8" file="out.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="shift ctrl"/>
        <cfg:command name="jumpToWorkInReferences"/>
    </cfg:binding>
    <cfg:command name="jumpToWorkInReferences">
        <cfg:macro>
            <cfg:sequence>
                <!--                <cfg:pass>
    allow this anywhere
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] references"/>
                </cfg:pass>
-->
                <cfg:command name="getRefWorkTitlesandIds"/>
                <cfg:command name="RemoveExtraDoubleQuotesFromPickLabelsCmd" parameter="%_"/>
                <cfg:command name="pick" parameter="'Jump to reference' true %_"/>
                <cfg:set variable="refWork" expression="%_" plainString="true"/>
                <cfg:command name="bookmark" parameter="add"/>
                <cfg:get expression="$refWork"/>
                <!--  beginning with XXE 4.9, selectById is no longer supported.
        Hussein suggests using the following which not only works in XXE 4.9, but also in XXE 4.8, 4.7,4.5.2 and probably earlier
        <cfg:command name="selectById" parameter="id %_"/>-->
                <cfg:command name="xpathSearch" parameter="[implicitNode] id('%_')"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F5"/>
        <cfg:command name="markAsGrammaticalGloss"/>
    </cfg:binding>
    <cfg:command name="markAsGrammaticalGloss">
        <cfg:macro repeatable="true" trace="false" undoable="true">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] gloss"/>
                </cfg:pass>
                <cfg:command name="wrap" parameter="[implicitElement] object"/>
                <cfg:command name="putAttribute" parameter="[implicitElement] type tGrammaticalGloss"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <!--
========================================
 XLingPap-specific 
========================================
-->
    <cfg:command name="produceWebPage">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="not(//lingPaper)"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but this is not a complete document.  It cannot be made into a web page file."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.produceWebPage"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="status" parameter="Deleting any web page file..."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.deleteWebPage"/>
                        <cfg:command name="status" parameter="%_"/>
                        <!-- Not needed because even on Windows, can produce the output file. 
                            <cfg:command name="DeletePDFFile" parameter="1 htm"/>
                        -->
                        <!--                        <cfg:command name="status" parameter="Producing the web page output..."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.producingWebPage"/>
                        <cfg:command name="status" parameter="%_"/>
                        <!--  Either do the embedded version or the canned version-->
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:choice>
                                    <!--        if either of the pass elements are true, do the embedded version-->
                                    <cfg:pass>
                                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] styledPaper"/>
                                    </cfg:pass>
                                    <cfg:pass>
                                        <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] styledPaper"/>
                                    </cfg:pass>
                                </cfg:choice>
                                <cfg:command name="applyXLingPapXHTMLTransform"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- otherwise use the default canned version -->
                                <cfg:command name="applyXLingPapTransform"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="applyXLingPapTransform">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="../transforms/XLingPap1.xsl" to="%{P}%{S}%{R}.htm">
                <!--
          sInterlinearSourceStyle:
          The default is AfterFirstLine (immediately after the last item in the first line)
          The other possibilities are AfterFree (immediately after the free translation, on the same line)
          and UnderFree (on the line immediately after the free translation)
        -->
                <cfg:parameter name="sInterlinearSourceStyle">AfterFirstLine</cfg:parameter>
            </cfg:transform>
            <!--
Following creates a new instance of IE each time it is invoked.
What we want is to load IE independently and to do a refresh so it will show the same place in the file.
           <cfg:shell command='start "C:\Program Files\Internet Explorer\IExplore.exe" "%{P}%{S}%{R}.htm"'/>
-->
        </cfg:process>
    </cfg:command>
    <cfg:command name="applyXLingPapXHTMLTransform">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="../transforms/XLingPapPublisherStylesheetXHTMLCSS.xsl" to="%{P}%{S}%{R}.css"/>
            <cfg:transform file="in2.xml" stylesheet="../transforms/XLingPapPublisherStylesheetXHTML.xsl" to="%{P}%{S}%{R}.htm">
                <cfg:parameter name="sFileName">%{R}</cfg:parameter>
            </cfg:transform>
        </cfg:process>
    </cfg:command>
    <cfg:command name="EBookPrep">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="not(//lingPaper)"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but this is not a complete document.  It cannot be made into a web page file."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.produceEBook"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="status" parameter="Deleting any web page file..."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.deleteEBook"/>
                        <cfg:command name="status" parameter="%_"/>
                        <!-- Not needed because even on Windows, can produce the output file. 
                            <cfg:command name="DeletePDFFile" parameter="1 htm"/>
                        -->
                        <!--  Can only do the embedded version-->
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:choice>
                                    <!--        if either of the pass elements are true, can convert -->
                                    <cfg:pass>
                                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] styledPaper"/>
                                    </cfg:pass>
                                    <cfg:pass>
                                        <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] styledPaper"/>
                                    </cfg:pass>
                                </cfg:choice>
                                <!--                        <cfg:command name="status" parameter="Producing the web page output..."/>-->
                                <cfg:command name="LocalizeString" parameter="msg.producingEBook"/>
                                <cfg:command name="status" parameter="%_ (1/4)"/>
                                <cfg:command name="ConvertToEPUBEBook"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- we won't allow using the default canned version -->
                                <!--                                <cfg:command name="alert" parameter="Sorry, but you must use a publisher style sheet to produce an EBook."/>-->
                                <cfg:command name="LocalizeString" parameter="msg.produceEBookNoStyleSheet"/>
                                <cfg:command name="alert" parameter="%_"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertToEPUBEBook">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="contains('%{S}','\')"/>
                        <cfg:command name="run" parameter="[Windows] path"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:test expression="not(contains('%_','Calibre'))"/>
                                <!--                                <cfg:command name="alert" parameter="Sorry, but it looks like you do not have Calibre installed.  See section 11.43 'Produce an EBook in EPUB Format' in the user documentation."/>-->
                                <cfg:command name="LocalizeString" parameter="msg.produceEBookNoCalibre"/>
                                <cfg:command name="alert" parameter="%_"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <cfg:command name="ConvertToEPUBEBookProcessing"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="run" parameter="[Unix] &quot;%{C}%{S}..%{S}batchfiles%{S}HasCalibre&quot;"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:test expression="contains('%_', 'XLingPaper-No-XLingPaper')"/>
                                <!--                                <cfg:command name="alert" parameter="Sorry, but it looks like you do not have Calibre installed.  See section 11.YY in the user documentation."/>-->
                                <cfg:command name="LocalizeString" parameter="msg.produceEBookNoCalibre"/>
                                <cfg:command name="alert" parameter="%_"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <cfg:command name="ConvertToEPUBEBookProcessing"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertToEPUBEBookProcessing">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}%{R}.epub"/>
                <cfg:set variable="result" plainString="true" expression="%_"/>
                <!--<cfg:get expression="$result"/>
                    <cfg:command name="alert" parameter="delete file returned %_"/>-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="contains($result, 'XLingPaper-FileFailedToDelete-XLingPaper')"/>
                        <cfg:command name="alert" parameter="Please close the %{R}.epub file in your reader and process again."/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!-- we're not using XeLaTeX here, but Calibre seems to need a safe file name, too -->
                        <cfg:command name="ConvertFileNameForXeLaTeXCmd" parameter="%{R}"/>
                        <cfg:set variable="safeXeLaTeXFileName" expression="%_" plainString="true"/>
                        <cfg:get expression="$safeXeLaTeXFileName"/>
                        <cfg:command name="eBookPrepPublisherStyleSheet" parameter="%_"/>
<!--                        <cfg:command name="alert" parameter="after eBookPrepPublisherStyleSheet"/>-->
                        <cfg:command name="LocalizeString" parameter="msg.producingEBook"/>
                        <cfg:command name="status" parameter="%_ (2/4)"/>
                        <cfg:get expression="$safeXeLaTeXFileName"/>
                        <cfg:command name="AddFileToCalibreLibrary" parameter="%_"/>
<!--                        <cfg:command name="alert" parameter="after AddFileToCalibreLibrary"/>-->
                        <cfg:command name="LocalizeString" parameter="msg.producingEBook"/>
                        <cfg:command name="status" parameter="%_ (3/4)"/>
                        <cfg:command name="GetHighestCalibreBookIdCmd" parameter="%{P}%{S}XLingPaperCalibreList.txt"/>
                        <cfg:set variable="CalibreBookId" plainString="true" expression="%_"/>
                        <!--<cfg:get expression="$CalibreBookId"/>
                        <cfg:command name="alert" parameter="book id = %_"/>-->
                        <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}XLingPaperCalibreList.txt"/>
                        <cfg:get expression="$safeXeLaTeXFileName"/>
                        <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}%_4EBook.htm"/>
                        <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}%{R}4EBook.css"/>
                        <!--                <cfg:set variable="deleteFileResult" plainString="true" expression="%_"/>
                            <cfg:get expression="$deleteFileResult"/>
                            <cfg:command name="alert" parameter="$deleteFileResult=%_"/>-->
                        <!--                <cfg:get expression="$CalibreBookId"/>
                            <cfg:command name="alert" parameter="$CalibreBookId = %_"/>-->
                        <!--                <cfg:set variable="Authors" plainString="false" expression="//author"/>-->
                        <cfg:command name="GetAuthorsForCalibreCmd"/>
                        <cfg:set variable="Authors" plainString="true" expression="%_"/>
                        <!-- the GetAuthors command also gets the publisher now -->
                        <!--                <cfg:get expression="$Authors"/>
                            <cfg:command name="alert" parameter="$Authors = %_"/>-->
                        <!--                <cfg:set variable="Publisher" plainString="false" expression="//publisherStyleSheetPublisher"/>-->
                        <!--           <cfg:get expression="$Publisher"/>
                            <cfg:command name="alert" parameter="$Publisher = %_"/>     -->
                        <!--                <cfg:get expression="concat($CalibreBookId,' ','&quot;',$Authors,'&quot;')"/>-->
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:test expression="//chapter | //chapterInCollection"/>
                                <cfg:get expression="concat($safeXeLaTeXFileName, ' ', $CalibreBookId,' ',$Authors)"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <cfg:get expression="concat($safeXeLaTeXFileName, ' ', $CalibreBookId,' ',$Authors,' paper')"/>
                            </cfg:sequence>
                        </cfg:choice>
                        <!--                <cfg:get expression="concat($CalibreBookId,' ',$Authors)"/>-->
                        <!--<cfg:set variable="commandLine1" plainString="true" expression="%_"/>
                            <cfg:get expression="$commandLine1"/>
                            <cfg:command name="alert" parameter="$commandLine1 = %_"/>
                            <cfg:get expression="$commandLine1"/>-->
                        <cfg:command name="ConvertToEPUB" parameter="%_"/>
                        <cfg:command name="LocalizeString" parameter="msg.producingEBook"/>
                        <cfg:command name="status" parameter="%_ (4/4)"/>
                        <!--<cfg:get expression="$CalibreBookId"/>
                        <cfg:command name="RemoveFileFromCalibreLibrary" parameter="%_"/>-->
                        <cfg:command name="beep"/>
                        <cfg:choice>
                            <cfg:command name="start" parameter="[Windows] ebook-viewer --raise-window &quot;%{P}%{S}%{R}.epub&quot;"/>
                            <cfg:command name="start" parameter="[Unix] ebook-viewer --raise-window &quot;%{P}%{S}%{R}.epub&quot;"/>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="eBookPrepPublisherStyleSheet">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="../transforms/XLingPapPublisherStylesheetXHTMLCSS.xsl" to="%{P}%{S}%{R}4EBook.css"/>
            <cfg:transform file="in2.xml" stylesheet="../transforms/XLingPapPublisherStylesheetXHTML.xsl" to="%{P}%{S}%{0}4EBook.htm">
                <cfg:parameter name="sFileName">%{R}</cfg:parameter>
                <cfg:parameter name="sMainSourcePath">%{p}</cfg:parameter>
                <cfg:parameter name="bEBook">Y</cfg:parameter>
            </cfg:transform>
        </cfg:process>
    </cfg:command>
    <cfg:command name="AddFileToCalibreLibrary">
        <cfg:process>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}AddFileToCalibreLibrary.bat&quot; &quot;%{P}%{S}%{0}4EBook.htm&quot; &quot;%{P}%{S}&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}AddFileToCalibreLibrary&quot; &quot;%{P}%{S}%{0}4EBook.htm&quot; &quot;%{P}%{S}&quot;" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="ConvertToEPUB">
        <cfg:process>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}ConvertToEPUB.bat&quot; %0 &quot;%{P}%{S}%{R}&quot; %1 &quot;%2&quot; &quot;%3&quot; %4" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}ConvertToEPUB&quot; %0 &quot;%{P}%{S}%{R}&quot; %1 &quot;%2&quot; &quot;%3&quot; %4" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="RemoveFileFromCalibreLibrary">
        <cfg:process>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}RemoveFileFromCalibreLibrary.bat&quot; %0" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}RemoveFileFromCalibreLibrary&quot; %0" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F7"/>
        <cfg:command name="produceWebPage"/>
    </cfg:binding>
    <cfg:command name="showXLingPapTransformResult">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{P}%{S}%{R}.htm&quot;"/>
            </cfg:sequence>
        </cfg:macro>
        <!--        <cfg:process>
            <!-\- following may well work for all platforms -\->
            <cfg:shell command="helper(defaultViewer) &quot;%{P}%{S}%{R}.htm&quot;"/>
            <!-\- 
            <cfg:shell command="start &quot;C:%{S}Program Files%{S}Internet Explorer%{S}IExplore.exe&quot; &quot;%{P}%{S}%{R}.htm&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{P}%{S}%{R}.htm&quot;" platform="Mac"/>
            -\->
        </cfg:process>
-->
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F8"/>
        <cfg:command name="showXLingPapTransformResult"/>
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="F9" modifiers="shift ctrl"/>
        <cfg:command name="producePDFViaRenderX"/>
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="F9"/>
        <cfg:command name="ProducePDFViaXeLaTeX"/>
    </cfg:binding>
    <cfg:binding>
        <cfg:keyPressed code="F10" modifiers="shift ctrl"/>
        <cfg:command name="ConvertAnyAbbreviationsInGlossToAbbrRef"/>
    </cfg:binding>
    <cfg:command name="ProducePDFViaXeLaTeX">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <!--                    <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;C:\Program Files\RenderX\XEP\xep.bat&quot;"/>-->
                    <cfg:command name="run" parameter="[Windows] echo hi"/>
                    <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}HasXeLaTeX&quot;"/>
                </cfg:choice>
                <cfg:set variable="exists" plainString="true" expression="%_"/>
                <!--                <cfg:get expression="$exists"/>-->
                <!--                <cfg:command name="alert" parameter="$exists = %_"/>-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                        <!--                        <cfg:command name="alert" parameter="It appears you do not have the XeLaTeX program installed.  Please try downloading and installing a complete installer for XLingPaper."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXNoXeLaTeX"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="not(//lingPaper)"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but this is not a complete document.  It cannot be made into a PDF file."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXNotAFullDocument"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:sequence>
                            <!-- It is potentially possible to produce the PDF.  Do some initial further checks.  -->
                            <!--                            <cfg:command name="status" parameter="Look for possible problems..."/>-->
                            <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXLookForProblems"/>
                            <cfg:command name="status" parameter="%_"/>
                            <cfg:command name="CheckPresenceOfFontsAndImagesCmd" parameter="%{P}"/>
<!--                                                    <cfg:command name="alert" parameter="After, result = %_"/>-->
                            <cfg:choice>
                                <cfg:sequence>
                                    <cfg:pass>
                                        <cfg:test expression="'%_' = 'allClear'"/>
                                    </cfg:pass>
                                    <!--                                    <cfg:command name="status" parameter="Deleting any PDF file..."/>-->
                                    <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXdDeletePDF"/>
                                    <cfg:command name="status" parameter="%_"/>
                                    <cfg:command name="DeletePDFFile" parameter="1 pdf"/>
                                    <!--                                    <cfg:command name="status" parameter="Producing the PDF output..."/>-->
                                    <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXProducing"/>
                                    <cfg:command name="status" parameter="%_"/>
                                    <!--                           <cfg:get expression="%{P}%{S}%{R}"/>
                                <cfg:sequence>
                                    <cfg:command name="run" parameter="[Windows] echo testing for drive letter only"/>-->
                                    <!-- Following command converts any characters in the file name that TeX cannot handle into hex codes. -->
                                    <cfg:command name="ConvertFileNameForXeLaTeXCmd" parameter="%{R}"/>
                                    <cfg:set variable="safeXeLaTeXFileName" expression="%_" plainString="true"/>
                                    <!-- <cfg:get expression="$safeXeLaTeXFileName"/>
                                    <cfg:command name="alert" parameter="safeXeLaTeXFileName = |%_|"/> -->
                                    <cfg:choice>
                                        <cfg:sequence>
                                            <!-- On Windows, we have to do something special if the file name is at the root (e..g C:\) -->
                                            <cfg:command name="run" parameter="[Windows] echo testing for drive letter only"/>
                                            <cfg:get expression="substring('%P',1,2)"/>
                                            <cfg:set variable="driveLetter" plainString="true" expression="%_"/>
                                            <!--                            <cfg:get expression="$driveLetter"/>
                                                <cfg:command name="alert" parameter="driveLetter = |%_|"/>
                                            -->
                                            <cfg:get expression="concat($driveLetter, ' ', $safeXeLaTeXFileName)"/>
                                        </cfg:sequence>
                                        <cfg:sequence>
                                            <cfg:command name="run" parameter="[Unix] echo no need to test for drive letter"/>
                                            <cfg:get expression="concat('/ ', $safeXeLaTeXFileName)"/>
                                        </cfg:sequence>
                                    </cfg:choice>
                                    <!--                                </cfg:sequence>-->
                                    <cfg:set variable="producePDFParameters" expression="%_" plainString="true"/>
                                    <!--   <cfg:get expression="$producePDFParameters"/>
                                <cfg:command name="alert" parameter="producePDFParameters = |%_|"/> -->
                                    <cfg:choice>
                                        <cfg:sequence>
                                            <cfg:test expression="//styledPaper"/>
                                            <cfg:get expression="$safeXeLaTeXFileName"/>
                                            <!--                                            <cfg:choice>
                                                <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>
                                                <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>
                                                <!-\-                                        <cfg:command name="run" parameter="&quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>-\->
                                            </cfg:choice>
                                            <cfg:set variable="exists" plainString="true" expression="%_"/>
                                            <cfg:choice>
-->
                                            <cfg:sequence>
                                                <!--                                                    <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                                                    <cfg:command name="alert" parameter="It appears you are producing a PDF for this file for the first time.  This first time will take longer than normal.  Please be patient."/>
-->
                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="producePDFFromEmbeddedStylesheetViaXeLaTeX" parameter="%_"/>
                                                <!--                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="producePDFFromEmbeddedStylesheetViaXeLaTeX" parameter="%_"/>
-->
                                                <cfg:command name="PDFCompletionProcessing"/>
                                            </cfg:sequence>
                                            <!--                                                <cfg:sequence>
                                                    <cfg:get expression="$producePDFParameters"/>
                                                    <cfg:command name="producePDFFromEmbeddedStylesheetViaXeLaTeX" parameter="%_"/>
                                                    <cfg:command name="PDFCompletionProcessing"/>
                                                </cfg:sequence>
                                            </cfg:choice>
-->
                                        </cfg:sequence>
                                        <cfg:sequence>
                                            <cfg:test expression="//chapter | //chapterInCollection"/>
                                            <cfg:get expression="$safeXeLaTeXFileName"/>
                                            <!--                                            <cfg:choice>
                                                <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>
                                                <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>
                                                <!-\-                                        <cfg:command name="run" parameter="&quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>-\->
                                            </cfg:choice>
                                            <cfg:set variable="exists" plainString="true" expression="%_"/>
                                            <cfg:choice>
-->
                                            <cfg:sequence>
                                                <!--                                                    <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                                                    <cfg:command name="alert" parameter="It appears you are producing a PDF for this file for the first time.  This first time will take longer than normal.  Please be patient."/>
-->
                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="produceBookPDFFromCannedStylesheetViaXeLaTeX" parameter="%_"/>
                                                <!--                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="produceBookPDFFromCannedStylesheetViaXeLaTeX" parameter="%_"/>
-->
                                                <cfg:command name="PDFCompletionProcessing"/>
                                            </cfg:sequence>
                                            <!--                                                <cfg:sequence>
                                                    <cfg:get expression="$producePDFParameters"/>
                                                    <cfg:command name="produceBookPDFFromCannedStylesheetViaXeLaTeX" parameter="%_"/>
                                                    <cfg:command name="PDFCompletionProcessing"/>
                                                </cfg:sequence>
                                            </cfg:choice>
-->
                                        </cfg:sequence>
                                        <cfg:sequence>
                                            <cfg:get expression="$safeXeLaTeXFileName"/>
                                            <!--                                            <cfg:choice>
                                                <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>
                                                <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>
                                                <!-\-                                        <cfg:command name="run" parameter="&quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%_.log&quot;"/>-\->
                                            </cfg:choice>
                                            <cfg:set variable="exists" plainString="true" expression="%_"/>
                                            <cfg:choice>
-->
                                            <cfg:sequence>
                                                <!--                                                    <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                                                    <cfg:command name="alert" parameter="It appears you are producing a PDF for this file for the first time.  This first time will take longer than normal.  Please be patient."/>
-->
                                                <!--                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="alert" parameter="old name = %{P}%{S}XLingPaperPDFTemp%{S}%_.pdf"/>
                                                <cfg:command name="alert" parameter="new place = %{P}%{S}%{R}.pdf"/>
-->
                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="producePaperPDFFromCannedStylesheetViaXeLaTeX" parameter="%_"/>
                                                <!--                                                <cfg:get expression="$producePDFParameters"/>
                                                <cfg:command name="producePaperPDFFromCannedStylesheetViaXeLaTeX" parameter="%_"/>
-->
                                                <cfg:command name="PDFCompletionProcessing"/>
                                            </cfg:sequence>
                                            <!--                                                <cfg:sequence>
                                                    <cfg:get expression="$producePDFParameters"/>
                                                    <cfg:command name="producePaperPDFFromCannedStylesheetViaXeLaTeX" parameter="%_"/>
                                                    <cfg:command name="PDFCompletionProcessing" parameter="%_"/>
                                                </cfg:sequence>
                                            </cfg:choice>
-->
                                        </cfg:sequence>
                                    </cfg:choice>
                                </cfg:sequence>
                                <cfg:sequence>
                                    <!--                                    <cfg:command name="alert" parameter="Some fonts and/or image files used in the document cannot be found and/or an image file name has some invalid characters and/or an SVG file needs to be converted to PDF.  Please use the 'Missing Fonts and/or Image Files' dialog to fix them.  Close it when you are done."/>-->
                                    <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXMissingFontsImages"/>
                                    <cfg:command name="alert" parameter="%_"/>
                                </cfg:sequence>
                            </cfg:choice>
                            <!--                            <cfg:command name="status" parameter="PDF Command has completed."/>-->
                            <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXProducedPDF"/>
                            <cfg:command name="status" parameter="%_"/>
                        </cfg:sequence>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="AdjustWindowsRootPath">
        <cfg:macro trace="false">
            <!--  Have to work around the fact that %P includes a final backslash *if* it is the root on a Windows machine;  
                when we then append %S, we get two backslashes in a row which causes a problem for the del command ('The network path was not found')-->
            <cfg:choice>
                <cfg:sequence>
                    <cfg:test expression="contains('%{P}%{S}','\\')"/>
                    <!--                                <cfg:command name="alert" parameter="%P%S has backslash backslash"/>-->
                    <cfg:get expression="concat(substring-before('%{P}%{S}','\\'),'%{S}')"/>
                </cfg:sequence>
                <cfg:sequence>
                    <cfg:get expression="'%{P}%{S}'"/>
                </cfg:sequence>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="DeletePDFFile">
        <!-- 
            parameter %0 is the nesting level
            parameter %1 is the file extentsion (pdf or doc)
        -->
        <cfg:macro trace="false">
            <cfg:choice>
                <cfg:sequence>
                    <!-- Give them 5 chances and then hope for the best... -->
                    <cfg:test expression="%0 &gt; 5"/>
                </cfg:sequence>
                <cfg:sequence>
                    <!--                    <cfg:command name="alert" parameter="b4 delete file"></cfg:command>
                    <cfg:command name="DeleteFile" parameter="&quot;%{P}%{S}%{R}.%1&quot;"/>
                    -->
                    <cfg:command name="AdjustWindowsRootPath"/>
                    <cfg:command name="DeleteFileCmd" parameter="%_%{R}.%1"/>
                    <!--                    <cfg:choice>
                        <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}DeletePdfFile.bat&quot; &quot;%_%{R}.%1&quot;"/>
                        <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}DeletePdfFile&quot; &quot;%{P}%{S}%{R}.%1&quot;"/>
                    </cfg:choice>
-->
                    <cfg:set variable="result" plainString="true" expression="%_"/>
                    <!--<cfg:get expression="$result"/>
                                        <cfg:command name="alert" parameter="delete file returned %_"/>-->
                    <cfg:choice>
                        <cfg:sequence>
                            <cfg:test expression="contains($result, 'XLingPaper-FileFailedToDelete-XLingPaper')"/>
                            <!--                            <cfg:test expression="not(contains($result, 'XLingPaper-PdfNotThere-XLingPaper'))"/>-->
                            <cfg:set variable="pdffile" plainString="true" expression="&quot;%{R}.%1&quot;"/>
                            <cfg:get expression="$pdffile"/>
                            <cfg:choice>
                                <cfg:sequence>
                                    <cfg:test expression="'%1'='pdf'"/>
                                    <!--                                    <cfg:command name="alert" parameter="Please close the %_ window in your PDF file viewer or shut down your PDF file viewer.  We cannot successfully produce the new PDF until you do."/>
                                    <cfg:command name="LocalizeString" parameter="msg.deletePDFFile"/>
                                    <cfg:command name="alert" parameter="msg string is: %_"/>
-->
                                    <cfg:command name="LocalizeString" parameter="msg.deletePDFFile"/>
                                    <cfg:set variable="msg" plainString="true" expression="%_"/>
                                    <cfg:get expression="replace($msg,'\{0\}',$pdffile)"/>
                                    <cfg:command name="alert" parameter="%_"/>
                                </cfg:sequence>
                                <cfg:sequence>
                                    <!--                                    <cfg:command name="alert" parameter="Please close the %_ window in your Word program or shut down your Word program.  We cannot successfully produce the new file until you do."/>-->
                                    <cfg:command name="LocalizeString" parameter="msg.deleteWordFile"/>
                                    <cfg:set variable="msg" plainString="true" expression="%_"/>
                                    <cfg:get expression="replace($msg,'\{0\}',$pdffile)"/>
                                    <cfg:command name="alert" parameter="%_"/>
                                </cfg:sequence>
                            </cfg:choice>
                            <cfg:set variable="level" expression="number(%0) + 1"/>
                            <cfg:get expression="$level"/>
                            <cfg:command name="DeletePDFFile" parameter="%_ %1"/>
                        </cfg:sequence>
                    </cfg:choice>
                </cfg:sequence>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="PDFCompletionProcessing">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}xelatex.err&quot;"/>
                    <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}xelatex.err&quot;"/>
                </cfg:choice>
                <cfg:set variable="exists" plainString="true" expression="%_"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                        <!--                        <cfg:command name="status" parameter="Showing the PDF output..."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.pdfCompletionProcessing"/>
                        <cfg:command name="status" parameter="%_"/>
                        <cfg:command name="beep"/>
                        <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{P}%{S}%{R}.pdf&quot;"/>
                        <!--<cfg:choice>
                            <cfg:command name="run" parameter="[Windows] helper(defaultViewer) &quot;%{P}%{S}%{R}.pdf&quot;"/>
                            <cfg:command name="start" parameter="[Unix] helper(defaultViewer) &quot;%{P}%{S}%{R}.pdf&quot;"/>
                        </cfg:choice>-->
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="status" parameter="Producing the PDF failed..."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.pdfProducingPDFFailed"/>
                        <cfg:command name="status" parameter="%_"/>
                        <cfg:command name="beep"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:pass>
                                    <!--                                    <cfg:test context="//language | //type" expression="contains(@XeLaTeXSpecial,'graphite')"/>-->
                                    <cfg:test context="//@XeLaTeXSpecial" expression="contains(.,'graphite')"/>
                                </cfg:pass>
                                <!--                                <cfg:command name="alert" parameter="It looks like you are trying to use the Graphite capability of the XeLaTeX way of producing PDF, but maybe do not have the XeLaTeX Upgrade installed.  Please install this upgrade and try again.  If you have installed the upgrade, then the produce PDF process did not suceed.  You must have discovered a bug.  Please zip up your '%{N}' file (and any graphic files it uses) and email them to andy_black@sil.org so we can fix it.  Thanks."/>-->
                                <cfg:command name="LocalizeString" parameter="msg.pdfGraphiteOrBug"/>
                                <cfg:set variable="msg" plainString="true" expression="%_"/>
                                <cfg:get expression="replace($msg,'%\{N\}','%{N}')"/>
                                <cfg:command name="alert" parameter="%_"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <!--                                <cfg:command name="alert" parameter="Oh, dear.  The produce PDF process did not succeed.  You must have discovered a bug.  Please zip up your '%{N}' file (and any graphic files it uses) and email them to andy_black@sil.org so we can fix it.  Thanks."/>-->
                                <cfg:command name="LocalizeString" parameter="msg.pdfBug"/>
                                <cfg:set variable="msg" plainString="true" expression="%_"/>
                                <cfg:get expression="replace($msg,'%\{N\}','%{N}')"/>
                                <cfg:command name="alert" parameter="%_"/>
                            </cfg:sequence>
                        </cfg:choice>
                        <cfg:choice>
                            <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}DeletePdfFile.bat&quot; &quot;%{P}%{S}%{R}.pdf&quot;"/>
                            <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}DeletePdfFile&quot; &quot;%{P}%{S}%{R}.pdf&quot;"/>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="producePDFViaRenderX">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}FileExists.bat&quot; &quot;C:\Program Files\RenderX\XEP\xep.bat&quot;"/>
                    <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}HasRenderX&quot;"/>
                </cfg:choice>
                <cfg:set variable="exists" plainString="true" expression="%_"/>
                <!--                <cfg:get expression="$exists"/>-->
                <!--                <cfg:command name="alert" parameter="$exists = %_"/>-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                        <!--                        <cfg:command name="alert" parameter="It appears you do not have the RenderX XEP program installed.  Please see section 11.17.2 of the user documentation."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.pdfRenderXNotInstalled"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:test expression="not(//lingPaper)"/>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but this is not a complete document.  It cannot be made into a PDF file."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXNotAFullDocument"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:choice>
                            <cfg:command name="run" parameter="[Windows] if exist &quot;%{P}%{S}XLingPaperPDFTemp%{S}xelatex.err&quot; del &quot;%{P}%{S}XLingPaperPDFTemp%{S}xelatex.err&quot;"/>
                            <cfg:command name="run" parameter="[Unix] echo hi"/>
                        </cfg:choice>
                        <cfg:command name="producePDF"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="producePDF">
        <cfg:macro>
            <cfg:sequence>
                <!--                <cfg:command name="status" parameter="Deleting any PDF file..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXdDeletePDF"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="DeletePDFFile" parameter="1 pdf"/>
                <!--                <cfg:command name="status" parameter="Producing the PDF output..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.producePDFViaXeLaTeXProducing"/>
                <cfg:command name="status" parameter="%_"/>
                <!--  Either do the embedded version or the canned version-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:choice>
                            <!--        if either of the pass elements are true, do the embedded version-->
                            <cfg:pass>
                                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] styledPaper"/>
                            </cfg:pass>
                            <cfg:pass>
                                <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] styledPaper"/>
                            </cfg:pass>
                        </cfg:choice>
                        <cfg:command name="producePDFFromEmbeddedStylesheet"/>
                        <cfg:command name="PDFCompletionProcessing"/>
                    </cfg:sequence>
                    <!-- if it has chapters, use book-oriented parameters in the canned version -->
                    <cfg:sequence>
                        <cfg:pass>
                            <cfg:test expression="//chapter | //chapterInCollection"/>
                        </cfg:pass>
                        <cfg:command name="produceBookPDFFromCannedStylesheet"/>
                        <cfg:command name="PDFCompletionProcessing"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!-- otherwise use the paper-oriented parameters in the canned version -->
                        <cfg:command name="producePaperPDFFromCannedStylesheet"/>
                        <cfg:command name="PDFCompletionProcessing"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="produceBookPDFFromCannedStylesheet">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapFO1.xsl" to="in.psmi">
                <cfg:parameter name="sFOProcessor">XEP</cfg:parameter>
                <!--
             sInterlinearSourceStyle:
             The default is AfterFirstLine (immediately after the last item in the first line)
             The other possibilities are AfterFree (immediately after the free translation, on the same line)
             and UnderFree (on the line immediately after the free translation)
          -->
                <cfg:parameter name="sInterlinearSourceStyle">AfterFirstLine</cfg:parameter>
            </cfg:transform>
            <!--            <cfg:copy quiet="true" files="in.psmi" to="%{P}%{S}%{R}habby.fo"/>-->
            <!--            <cfg:transform file="in.psmi" stylesheet="..%{S}transforms%{S}psmi.xsl" to="%{P}%{S}%{R}.fo"/>-->
            <cfg:transform file="in.psmi" stylesheet="..%{S}transforms%{S}XLingPapPSMI.xsl" to="%{P}%{S}%{R}.fo"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoPDF.bat&quot; &quot;%{P}%{S}%{R}&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoPDF&quot; &quot;%{P}%{S}%{R}&quot;" platform="Mac"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="producePaperPDFFromCannedStylesheet">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="producePaperPDFFromCannedStylesheetViaFO"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ProducePDFViaXeLaTeXInitialProcessing">
        <cfg:process>
            <cfg:mkdir quiet="true" dir="%{P}%{S}XLingPaperPDFTemp"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoAuxFilePrep.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%0&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}BeginTOC.toc&quot; toc" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoAuxFilePrep.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%0&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}BeginIndex.idx&quot; idx" platform="Windows"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="ProducePDFViaXeLaTeXPostProcessing">
        <cfg:process>
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF.bat&quot; &quot;&quot;\&quot;%{R}.tex\&quot;&quot;&quot; &quot;%{P}%{S}XLingPaperPDFTemp&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}resetvars.bat&quot; &quot;%{R}.aux&quot;" platform="Windows"/>-->
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF.bat&quot; &quot;&quot;\&quot;%1.tex\&quot;&quot;&quot; &quot;%{P}%{S}XLingPaperPDFTemp&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}resetvars.bat&quot; %0 &quot;%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf&quot; &quot;%{P}%{S}%{R}.pdf&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF&quot; &quot;%1.tex&quot;  &quot;%{P}%{S}XLingPaperPDFTemp&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf&quot; &quot;%{P}%{S}%{R}.pdf&quot;" platform="Unix"/>
            <!-- moved these to the batch file           <cfg:shell  command="copy &quot;%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf&quot; &quot;%{P}%{S}%{R}.pdf&quot;" platform="Windows"/>
            <cfg:shell  command="cp &quot;%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf&quot; &quot;%{P}%{S}%{R}.pdf&quot;" platform="Unix"/>
            <cfg:shell  command="del &quot;%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf&quot;" platform="Windows"/>
            <cfg:shell  command="rm &quot;%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf&quot;" platform="Unix"/>
-->
            <!--  these use a glob pattern so if a user chooses to use square brackets in a file name, then messes it up      
    <cfg:copy quiet="true" files="%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf" to="%{P}%{S}%{R}.pdf"/>
            <cfg:delete quiet="true" files="%{P}%{S}XLingPaperPDFTemp%{S}%1.pdf"/>-->
        </cfg:process>
    </cfg:command>
    <cfg:command name="producePaperPDFFromCannedStylesheetViaXeLaTeX">
        <cfg:process>
            <!--            <cfg:mkdir quiet="true" dir="%{P}%{S}XLingPaperPDFTemp"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoAuxFilePrep.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%{R}&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}BeginTOC.toc&quot; toc" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoAuxFilePrep.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%{R}&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}BeginIndex.idx&quot; idx" platform="Windows"/>
-->
            <cfg:subProcess name="ProducePDFViaXeLaTeXInitialProcessing" parameter="&quot;%1&quot;"/>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapXeLaTeX1.xsl" to="TeXML.xml">
                <cfg:parameter name="sPageWidth">8.5in</cfg:parameter>
                <cfg:parameter name="sPageHeight">11in</cfg:parameter>
                <cfg:parameter name="sBasicPointSize">12</cfg:parameter>
                <cfg:parameter name="sFootnotePointSize">10</cfg:parameter>
                <cfg:parameter name="sSection1PointSize">14</cfg:parameter>
                <cfg:parameter name="sSection2PointSize">12</cfg:parameter>
                <cfg:parameter name="sSection3PointSize">12</cfg:parameter>
                <cfg:parameter name="sSection4PointSize">12</cfg:parameter>
                <cfg:parameter name="sBackMatterItemTitlePointSize">14</cfg:parameter>
                <cfg:parameter name="sPageInsideMargin">1.5in</cfg:parameter>
                <cfg:parameter name="sPageOutsideMargin">1in</cfg:parameter>
                <cfg:parameter name="sFOProcessor">TeX</cfg:parameter>
                <cfg:parameter name="sMainSourcePath">%{p}</cfg:parameter>
                <cfg:parameter name="sMainSourceFile">%1</cfg:parameter>
                <!--
                    sInterlinearSourceStyle:
                    The default is AfterFirstLine (immediately after the last item in the first line)
                    The other possibilities are AfterFree (immediately after the free translation, on the same line)
                    and UnderFree (on the line immediately after the free translation)
                -->
                <cfg:parameter name="sInterlinearSourceStyle">AfterFree</cfg:parameter>
            </cfg:transform>
            <!--            <cfg:copy files="TeXML.xml" to="%{P}%{S}XLingPaperPDFTemp%{S}TeXML.xml"/>-->
            <!--                        <cfg:copy quiet="true" files="TeXML.xml" to="%{P}%{S}TeXML.xml"/>-->
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXMLLikeCharConv.bat&quot; TeXML.xml TeXML2.xml &quot;%{C}%{S}..%{S}bin%{S}TeXMLLikeCharConv.exe&quot;" platform="Windows"/>-->
            <cfg:invoke method="xlingpaper.xxe.TeXMLLikeCharacterConversion.convert"/>
            <!--                        <cfg:copy files="TeXML2.xml" to="%{P}%{S}XLingPaperPDFTemp%{S}TeXML2.xml"/>-->
            <!--                        <cfg:copy quiet="true" files="TeXML2.xml" to="%{P}%{S}TeXML2.xml"/>-->
<!--            <cfg:transform file="TeXML2.xml" stylesheet="..%{S}transforms%{S}TeXMLLike.xsl" to="%{P}%{S}XLingPaperPDFTemp%{S}%1.tex"/>-->
            <cfg:transform file="TeXML2.xml" stylesheet="..%{S}transforms%{S}TeXMLLike.xsl" to="TeXML2.tex"/>
            <cfg:invoke method="xlingpaper.xxe.NonASCIIIDandIDREFConversion.convert"/>
            <cfg:copy quiet="true" files="TeXML3.tex" to="%{P}%{S}XLingPaperPDFTemp%{S}%1.tex"/>
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF.bat&quot; &quot;%{R}.tex&quot; &quot;%{P}%{S}XLingPaperPDFTemp&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}resetvars.bat&quot; &quot;%{R}.aux&quot;" platform="Windows"/>-->
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF.bat&quot; &quot;&quot;\&quot;%{R}.tex\&quot;&quot;&quot; &quot;%{P}%{S}XLingPaperPDFTemp&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}resetvars.bat&quot; &quot;%{R}.aux&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF&quot; &quot;%{P}%{S}%{R}&quot;" platform="Mac"/>
            <cfg:copy quiet="true" files="%{P}%{S}XLingPaperPDFTemp%{S}%{R}.pdf" to="%{P}%{S}%{R}.pdf"/>
            <cfg:delete quiet="true" files="%{P}%{S}XLingPaperPDFTemp%{S}%{R}.pdf"/>
-->
            <cfg:subProcess name="ProducePDFViaXeLaTeXPostProcessing" parameter="%0 &quot;%1&quot;"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="producePDFFromEmbeddedStylesheetViaXeLaTeX">
        <cfg:process>
            <cfg:subProcess name="ProducePDFViaXeLaTeXInitialProcessing" parameter="&quot;%1&quot;"/>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapPublisherStylesheetXeLaTeX.xsl" to="TeXML.xml">
                <cfg:parameter name="sFOProcessor">TeX</cfg:parameter>
                <cfg:parameter name="sMainSourcePath">%{p}</cfg:parameter>
                <cfg:parameter name="sMainSourceFile">%1</cfg:parameter>
            </cfg:transform>
            <!--                        <cfg:copy quiet="true" files="TeXML.xml" to="%{P}%{S}TeXML.xml"/>-->
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXMLLikeCharConv.bat&quot; TeXML.xml TeXML2.xml &quot;%{C}%{S}..%{S}bin%{S}TeXMLLikeCharConv.exe&quot;" platform="Windows"/>-->
            <cfg:invoke method="xlingpaper.xxe.TeXMLLikeCharacterConversion.convert"/>
            <!--                        <cfg:copy quiet="true" files="TeXML2.xml" to="%{P}%{S}TeXML2.xml"/>-->
<!--            <cfg:transform file="TeXML2.xml" stylesheet="..%{S}transforms%{S}TeXMLLike.xsl" to="%{P}%{S}XLingPaperPDFTemp%{S}%1.tex"/>-->
            <cfg:transform file="TeXML2.xml" stylesheet="..%{S}transforms%{S}TeXMLLike.xsl" to="TeXML2.tex"/>
<!--            <cfg:copy quiet="true" files="TeXML2.tex" to="%{P}%{S}XLingPaperPDFTemp%{S}TeXML2.tex"/>-->
            <cfg:invoke method="xlingpaper.xxe.NonASCIIIDandIDREFConversion.convert"/>
            <cfg:copy quiet="true" files="TeXML3.tex" to="%{P}%{S}XLingPaperPDFTemp%{S}%1.tex"/>
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF.bat&quot; &quot;&quot;\&quot;%{R}.tex\&quot;&quot;&quot; &quot;%{P}%{S}XLingPaperPDFTemp&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}resetvars.bat&quot; &quot;%{R}.aux&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXPDF&quot; &quot;%{P}%{S}%{R}&quot;" platform="Mac"/>
            <cfg:copy quiet="true" files="%{P}%{S}XLingPaperPDFTemp%{S}%{R}.pdf" to="%{P}%{S}%{R}.pdf"/>
            <cfg:delete quiet="true" files="%{P}%{S}XLingPaperPDFTemp%{S}%{R}.pdf"/>
-->
            <cfg:subProcess name="ProducePDFViaXeLaTeXPostProcessing" parameter="%0 &quot;%1&quot;"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="produceBookPDFFromCannedStylesheetViaXeLaTeX">
        <cfg:process>
            <!--            <cfg:mkdir quiet="true" dir="%{P}%{S}XLingPaperPDFTemp"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoAuxFilePrep.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%{R}&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}BeginTOC.toc&quot; toc" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoAuxFilePrep.bat&quot; &quot;%{P}%{S}XLingPaperPDFTemp%{S}%{R}&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}BeginIndex.idx&quot; idx" platform="Windows"/>
-->
            <cfg:subProcess name="ProducePDFViaXeLaTeXInitialProcessing" parameter="&quot;%1&quot;"/>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapXeLaTeX1.xsl" to="TeXML.xml">
                <cfg:parameter name="sFOProcessor">TeX</cfg:parameter>
                <cfg:parameter name="sMainSourcePath">%{p}</cfg:parameter>
                <cfg:parameter name="sMainSourceFile">%1</cfg:parameter>
                <!--
                    sInterlinearSourceStyle:
                    The default is AfterFirstLine (immediately after the last item in the first line)
                    The other possibilities are AfterFree (immediately after the free translation, on the same line)
                    and UnderFree (on the line immediately after the free translation)
                -->
                <cfg:parameter name="sInterlinearSourceStyle">AfterFree</cfg:parameter>
            </cfg:transform>
            <!--            <cfg:copy quiet="true" files="TeXML.xml" to="%{P}%{S}TeXML.xml"/>-->
            <!--            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoTeXMLLikeCharConv.bat&quot; TeXML.xml TeXML2.xml &quot;%{C}%{S}..%{S}bin%{S}TeXMLLikeCharConv.exe&quot;" platform="Windows"/>-->
            <cfg:invoke method="xlingpaper.xxe.TeXMLLikeCharacterConversion.convert"/>
            <!--            <cfg:copy quiet="true" files="TeXML2.xml" to="%{P}%{S}TeXML2.xml"/>-->
            <cfg:transform file="TeXML2.xml" stylesheet="..%{S}transforms%{S}TeXMLLike.xsl" to="%{P}%{S}XLingPaperPDFTemp%{S}%1.tex"/>
            <cfg:subProcess name="ProducePDFViaXeLaTeXPostProcessing" parameter="%0 &quot;%1&quot;"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="producePaperPDFFromCannedStylesheetViaFO">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapFO1.xsl" to="in.psmi">
                <cfg:parameter name="sPageWidth">8.5in</cfg:parameter>
                <cfg:parameter name="sPageHeight">11in</cfg:parameter>
                <cfg:parameter name="sBasicPointSize">12</cfg:parameter>
                <cfg:parameter name="sFootnotePointSize">10</cfg:parameter>
                <cfg:parameter name="sSection1PointSize">14</cfg:parameter>
                <cfg:parameter name="sSection2PointSize">12</cfg:parameter>
                <cfg:parameter name="sSection3PointSize">12</cfg:parameter>
                <cfg:parameter name="sSection4PointSize">12</cfg:parameter>
                <cfg:parameter name="sBackMatterItemTitlePointSize">14</cfg:parameter>
                <cfg:parameter name="sPageInsideMargin">1.5in</cfg:parameter>
                <cfg:parameter name="sPageOutsideMargin">1in</cfg:parameter>
                <cfg:parameter name="sFOProcessor">XEP</cfg:parameter>
                <!--
                    sInterlinearSourceStyle:
                    The default is AfterFirstLine (immediately after the last item in the first line)
                    The other possibilities are AfterFree (immediately after the free translation, on the same line)
                    and UnderFree (on the line immediately after the free translation)
                -->
                <cfg:parameter name="sInterlinearSourceStyle">AfterFirstLine</cfg:parameter>
            </cfg:transform>
            <!--            <cfg:copy quiet="true" files="in.psmi" to="%{P}%{S}%{R}habby.fo"/>-->
            <!--            <cfg:transform file="in.psmi" stylesheet="..%{S}transforms%{S}psmi.xsl" to="%{P}%{S}%{R}.fo"/>-->
            <cfg:transform file="in.psmi" stylesheet="..%{S}transforms%{S}XLingPapPSMI.xsl" to="%{P}%{S}%{R}.fo"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoPDF.bat&quot; &quot;%{P}%{S}%{R}&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoPDF&quot; &quot;%{P}%{S}%{R}&quot;" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="producePDFFromEmbeddedStylesheet">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapPublisherStylesheetFO.xsl" to="%{P}/%{R}.fo"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoPDF.bat&quot; &quot;%{P}%{S}%{R}&quot;" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoPDF&quot; &quot;%{P}%{S}%{R}&quot;" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="produceOpenOfficeDocument">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="produceWord2003Document" parameter="'odt'"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="produceWord2003Document">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}HasXSL-FOConverter.bat&quot;"/>
                    <cfg:command name="run" parameter="[Unix] sh &quot;%{C}%{S}..%{S}batchfiles%{S}HasXSL-FOConverter&quot;"/>
                </cfg:choice>
                <cfg:set variable="exists" plainString="true" expression="%_"/>
                <!--           <cfg:get expression="$exists"/>
                    <cfg:command name="alert" parameter="Old $exists = %_"/>-->
                <cfg:sequence>
                    <cfg:choice>
                        <cfg:sequence>
                            <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                            <!--                            <cfg:command name="alert" parameter="It appears you do not have the XMLmind XSL-FO Converter program installed.  Please see section 11.18 of the user documentation."/>-->
                            <cfg:command name="LocalizeString" parameter="msg.xslfoConverterMissing"/>
                            <cfg:command name="alert" parameter="%_"/>
                        </cfg:sequence>
                        <cfg:sequence>
                            <cfg:sequence>
                                <!-- test to see if any material might be lost in the process and let user know -->
                                <cfg:choice>
                                    <cfg:sequence>
                                        <cfg:pass>
                                            <cfg:test expression="//endnote[descendant::table or descendant::example]"/>
                                        </cfg:pass>
                                        <!--                                        <cfg:command name="alert" parameter="Please note that there is at least one endnote with a table or example in it.  The resulting output will not include this table or example.  You will have to add it by hand."/>-->
                                        <cfg:command name="LocalizeString" parameter="msg.endnoteTableNotInOutput"/>
                                        <cfg:command name="alert" parameter="%_"/>
                                    </cfg:sequence>
                                    <cfg:sequence>
                                        <cfg:test expression="contains('x','x')"/>
                                    </cfg:sequence>
                                </cfg:choice>
                            </cfg:sequence>
                            <cfg:choice>
                                <cfg:sequence>
                                    <cfg:pass>
                                        <cfg:test expression="'%0'='odt'"/>
                                    </cfg:pass>
                                    <cfg:command name="DeleteAndProduceODTFile"/>
                                </cfg:sequence>
                                <cfg:sequence>
                                    <cfg:command name="DeleteAndProduceWordFile"/>
                                </cfg:sequence>
                            </cfg:choice>
                        </cfg:sequence>
                    </cfg:choice>
                </cfg:sequence>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="DeleteAndProduceWordFile">
        <cfg:macro>
            <cfg:sequence>
                <!--                <cfg:command name="status" parameter="Deleting any Word file..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.produceWordDeleteWord"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="DeletePDFFile" parameter="1 doc"/>
                <!--                <cfg:command name="status" parameter="Producing the Word output..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.produceWordProducing"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="produceWord2003DocumentViaXFC"/>
                <!--                <cfg:command name="status" parameter="Showing the Word output..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.wordCompletionProcessing"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="beep"/>
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{P}%{S}%{R}.doc&quot;"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="DeleteAndProduceODTFile">
        <cfg:macro trace="false">
            <cfg:sequence>
                <!--                <cfg:command name="status" parameter="Deleting any Open Office file..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.produceOOWDeleteOOW"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="DeletePDFFile" parameter="1 odt"/>
                <!--                <cfg:command name="status" parameter="Producing the Open Office output..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.produceOOWProducing"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="produceWord2003DocumentViaXFC" parameter="'odt'"/>
                <!--                <cfg:command name="status" parameter="Showing the Open Office output..."/>-->
                <cfg:command name="LocalizeString" parameter="msg.oowCompletionProcessing"/>
                <cfg:command name="status" parameter="%_"/>
                <cfg:command name="beep"/>
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{P}%{S}%{R}.odt&quot;"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="produceWord2003DocumentViaXFC">
        <cfg:macro trace="false">
            <!--  Either do the embedded version or the canned version-->
            <cfg:choice>
                <cfg:sequence>
                    <cfg:choice>
                        <!--        if either of the pass elements are true, do the embedded version-->
                        <cfg:pass>
                            <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] styledPaper"/>
                        </cfg:pass>
                        <cfg:pass>
                            <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] styledPaper"/>
                        </cfg:pass>
                    </cfg:choice>
                    <cfg:command name="produceWord2003DocumentFromEmbeddedStylesheet" parameter="%0"/>
                </cfg:sequence>
                <!-- otherwise do the canned version -->
                <cfg:sequence>
                    <cfg:command name="produceWord2003DocumentFromCannedStylesheet" parameter="%0"/>
                </cfg:sequence>
            </cfg:choice>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="produceWord2003DocumentFromCannedStylesheet">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapFO1.xsl" to="%{P}/%{R}.fo">
                <cfg:parameter name="sPageWidth">8.5in</cfg:parameter>
                <cfg:parameter name="sPageHeight">11in</cfg:parameter>
                <cfg:parameter name="sBasicPointSize">12</cfg:parameter>
                <cfg:parameter name="sFootnotePointSize">10</cfg:parameter>
                <cfg:parameter name="sSection1PointSize">14</cfg:parameter>
                <cfg:parameter name="sSection2PointSize">12</cfg:parameter>
                <cfg:parameter name="sSection3PointSize">12</cfg:parameter>
                <cfg:parameter name="sSection4PointSize">12</cfg:parameter>
                <cfg:parameter name="sBackMatterItemTitlePointSize">14</cfg:parameter>
                <cfg:parameter name="sPageInsideMargin">1.5in</cfg:parameter>
                <cfg:parameter name="sPageOutsideMargin">1in</cfg:parameter>
                <cfg:parameter name="sFOProcessor">XFC</cfg:parameter>
                <!--
          sInterlinearSourceStyle:
          The default is AfterFirstLine (immediately after the last item in the first line)
          The other possibilities are AfterFree (immediately after the free translation, on the same line)
          and UnderFree (on the line immediately after the free translation)
        -->
                <cfg:parameter name="sInterlinearSourceStyle">AfterFirstLine</cfg:parameter>
            </cfg:transform>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoWord.bat&quot; &quot;%{P}%{S}%{R}&quot; &quot;%{P}&quot; %0" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoWord&quot; &quot;%{P}%{S}%{R}&quot; %0" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="produceWord2003DocumentFromEmbeddedStylesheet">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapPublisherStylesheetFO.xsl" to="%{P}/%{R}.fo">
                <cfg:parameter name="sFOProcessor">XFC</cfg:parameter>
            </cfg:transform>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoWord.bat&quot; &quot;%{P}%{S}%{R}&quot; &quot;%{P}&quot; %0" platform="Windows"/>
            <cfg:shell command="&quot;%{C}%{S}..%{S}batchfiles%{S}DoWord&quot; &quot;%{P}%{S}%{R}&quot; %0" platform="Unix"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="showXLingPapUserDocumentation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{C}%{S}..%{S}doc%{S}UserDocXMLmind.htm&quot;"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="showXLingPapPubStyleSheetDocumentation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{C}%{S}..%{S}doc%{S}PublisherStylesheetUserDocXMLmind.htm&quot;"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="showXLingPapQuickReferenceGuideDocumentation">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{C}%{S}..%{S}doc%{S}XLingPaperQuickReferenceGuide.pdf&quot;"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="showAboutXLingPaper">
        <cfg:macro>
            <cfg:sequence>
                <!--                <cfg:command name="produceAboutXLingPaperPage"/>-->
                <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{C}%{S}..%{S}doc%{S}AboutXLingPaper.htm&quot;"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="produceAboutXLingPaperPage">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="%{C}%{S}..%{S}xlingpap.xxe_addon" stylesheet="..%{S}transforms%{S}AboutXLingPaper.xsl" to="%{C}%{S}..%{S}doc%{S}AboutXLingPaper.htm"/>
        </cfg:process>
    </cfg:command>
    <!-- Not used very much; will try turning it off and see what reaction we get.   
    <cfg:binding>
        <cfg:keyPressed code="F10"/>
        <cfg:command name="produceWord2003Document"/>
    </cfg:binding>-->
    <cfg:command name="xhtml.tableEdit">
        <cfg:class>com.xmlmind.xmleditext.xhtml.table.HTMLTableEdit</cfg:class>
    </cfg:command>
    <!--    Not that common an operation to deserve a keyboard short-cut
    <cfg:binding>
        <cfg:keyPressed code="F9" modifiers="shift"/>
        <cfg:command name="associatePublisherStylesheet"/>
    </cfg:binding>
-->
    <cfg:command name="removePublisherStylesheet">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:pass>
                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] xlingpaper"/>
                    </cfg:pass>
                    <cfg:pass>
                        <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] xlingpaper"/>
                    </cfg:pass>
                </cfg:choice>
                <cfg:command name="RemovePublisherStylesheetCmd"/>
                <cfg:set variable="result" expression="%_" plainString="true"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="string-length($result) &gt; 0"/>
                        <cfg:get expression="$result"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="XXE.save" parameter="[ifNeeded]"/>
                        <cfg:command name="XXE.open" parameter="%D"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="associatePublisherStylesheet">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:pass>
                        <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] lingPaper xlingpaper"/>
                    </cfg:pass>
                    <cfg:pass>
                        <cfg:command name="selectNode" parameter="descendantOrSelf[implicitElement] lingPaper  xlingpaper"/>
                    </cfg:pass>
                </cfg:choice>
                <cfg:command name="selectFile" parameter="[Choose Publisher Style Sheet]openFile %{c}/../publisherstylesheets/SILInternationalPaperStylesheet.xml"/>
                <cfg:set variable="fileName" expression="%_" plainString="true"/>
                <!--                <cfg:get expression="$fileName"/>
                <cfg:command name="alert" parameter="After setting fileName: %_"/>
-->
                <cfg:set variable="editedDocURL" expression="%{d}" plainString="true"/>
                <!--<cfg:get expression="$editedDocURL"/>
                <cfg:command name="alert" parameter="editedDocURL: %_"/>
                -->
                <cfg:get expression="$fileName"/>
                <cfg:get expression="relativize-uri(uri-or-file-name('%_'), $editedDocURL)"/>
                <cfg:set variable="uri" expression="%_" plainString="true"/>
                <!--                <cfg:command name="alert" parameter="Before invoking Java command"/>-->
                <cfg:get expression="concat($fileName, '|', $uri)"/>
                <cfg:command name="AssociatePublisherStylesheetCmd" parameter="%_"/>
                <cfg:set variable="result" expression="%_" plainString="true"/>
                <!--                <cfg:command name="alert" parameter="After invoking Java command"/>-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="string-length($result) &gt; 0"/>
                        <cfg:get expression="$result"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="XXE.save" parameter="[ifNeeded]"/>
                        <cfg:command name="XXE.open" parameter="%D"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="associateHandoutStylesheetTransform">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform cacheStylesheet="true" file="in.xml" stylesheet="..%{S}transforms%{S}AssociatePublisherStylesheet.xsl" to="%{P}%{S}%{R}Handout.%{E}">
                <cfg:parameter name="sStylesheetURL">%{c}/../publisherstylesheets/HandoutStylesheet.xml</cfg:parameter>
            </cfg:transform>
        </cfg:process>
    </cfg:command>
    <cfg:command name="produceHandout">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="produceHandoutTransform"/>
                <!-- is there a better way to do the following so we don''t have to load it twice? 

NB actually it associates the stylesheet with the original file, not the new handout one-->
                <cfg:command name="associateHandoutStylesheetTransform"/>
                <cfg:command name="XXE.open" parameter="%{P}%{S}%{R}Handout.%{E}"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="produceHandoutTransform">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/XLingPapRemoveAnyContent.xsl" to="in2.xml"/>
            <cfg:transform cacheStylesheet="true" file="in2.xml" stylesheet="..%{S}transforms%{S}XLingPapToHandout.xsl" to="%{P}%{S}%{R}Handout.%{E}"/>
        </cfg:process>
    </cfg:command>
    <!-- Following requires almost 12MB of zipped stuff to actually work...  
        Since we don't want to force every user to download so much, 
        maybe we can turn it all into a separate package on the Google Code site that
        users can download and run as needed...
    -->
    <cfg:command name="ConvertSVGFileToPDF">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}HaveBatikRasterrizer.bat&quot; &quot;%{C}%{S}..%{S}batchfiles%{S}resetvars.bat&quot;"/>
                    <cfg:command name="run" parameter="[Unix] &quot;%{C}%{S}..%{S}batchfiles%{S}HaveBatikRasterrizer&quot;"/>
                </cfg:choice>
                <cfg:set variable="exists" plainString="true" expression="%_"/>
                <!--                <cfg:get expression="$exists"/>-->
                <!--                <cfg:command name="alert" parameter="$exists = %_"/>-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="contains($exists, 'XLingPaper-No-XLingPaper')"/>
                        <!--                        <cfg:command name="alert" parameter="It appears you do not have the .svg to .pdf conversion package installed.  Please see section 11.17.1.1 of the user documentation."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.svgToPDFMissing"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:command name="ConvertSVGFileToPDFViaBatikRasterizer"/>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertSVGFileToPDFViaBatikRasterizer">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="selectFile" parameter="[Choose SVG File]openFile %{d}"/>
                <cfg:choice>
                    <cfg:command name="run" parameter="[Windows] &quot;%{C}%{S}..%{S}batchfiles%{S}DoBatikRasterizer.bat&quot; &quot;%_&quot; &quot;%{C}%{S}..%{S}batchfiles&quot;"/>
                    <cfg:command name="run" parameter="[Unix] &quot;%{C}%{S}..%{S}batchfiles%{S}DoBatikRasterizer&quot; &quot;%_&quot;"/>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ZoteroMODSToXLingPaperReferences">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="selectFile" parameter="[Choose Zotero MODS File]openFile %{d}"/>
                <cfg:command name="applyTransformsToZoteroMODSFile" parameter="&quot;%_&quot;"/>
                <cfg:command name="XXE.open" parameter="%{P}%{S}ZoteroMODSReferences.xml"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="applyTransformsToZoteroMODSFile">
        <cfg:process>
            <!--  need to avoid glob problems           <cfg:copy files="%0" to="in.xml"/>-->
            <cfg:shell command="copy &quot;%0&quot; in.xml" platform="Windows"/>
            <cfg:shell command="cp &quot;%0&quot; in.xml" platform="Unix"/>
            <cfg:transform file="in.xml" stylesheet="..%{S}transforms%{S}MODS2XLingPaperReferences.xsl" to="pass1.xml"/>
            <cfg:transform file="pass1.xml" stylesheet="..%{S}transforms%{S}MODS2XLingPaperReferencesMergeAuthors.xsl" to="%{P}%{S}ZoteroMODSReferences.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="EndnoteXMLToXLingPaperReferences">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="selectFile" parameter="[Choose Endnote XML File]openFile %{d}"/>
                <cfg:command name="applyTransformsToEndnoteXMLFile" parameter="&quot;%_&quot;"/>
                <cfg:command name="XXE.open" parameter="%{P}%{S}EndnoteXMLReferences.xml"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="applyTransformsToEndnoteXMLFile">
        <cfg:process>
            <!-- need to avoid glob problems <cfg:copy files="%0" to="in.xml"/>-->
            <cfg:shell command="copy &quot;%0&quot; in.xml" platform="Windows"/>
            <cfg:shell command="cp &quot;%0&quot; in.xml" platform="Unix"/>
            <cfg:transform file="in.xml" stylesheet="..%{S}transforms%{S}EndnoteXML2XLingPaperReferences.xsl" to="pass1.xml"/>
            <cfg:transform file="pass1.xml" stylesheet="..%{S}transforms%{S}MODS2XLingPaperReferencesMergeAuthors.xsl" to="%{P}%{S}EndnoteXMLReferences.xml"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="ModifyLangAttributesInDocument">
        <cfg:macro trace="false">
            <cfg:sequence>
                <!--                <cfg:command name="prompt" parameter="'Old langData name (no spaces, just letters)' 'lVernacular'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.modifyLangAttributesInDocument1"/>
                <cfg:command name="prompt" parameter="'%_'  'lVernacular'"/>
                <cfg:set variable="oldLangData" expression="%_" plainString="true"/>
                <!--                <cfg:command name="prompt" parameter="'New langData name (no spaces, just letters)' 'lVernacular'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.modifyLangAttributesInDocument2"/>
                <cfg:command name="prompt" parameter="'%_' 'lVernacular'"/>
                <cfg:set variable="newLangData" expression="%_" plainString="true"/>
                <!--                <cfg:command name="prompt" parameter="'Old gloss name (no spaces, just letters)' 'lGloss'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.modifyLangAttributesInDocument3"/>
                <cfg:command name="prompt" parameter="'%_' 'lGloss'"/>
                <cfg:set variable="oldGloss" expression="%_" plainString="true"/>
                <!--                <cfg:command name="prompt" parameter="'New gloss name (no spaces, just letters)' 'lGloss'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.modifyLangAttributesInDocument4"/>
                <cfg:command name="prompt" parameter="'%_' 'lGloss'"/>
                <cfg:set variable="newGloss" expression="%_" plainString="true"/>
                <cfg:get expression="translate('%{C}',' ','*')"/>
                <cfg:set variable="path" expression="%_" plainString="true"/>
                <cfg:get expression="concat($oldLangData, ' ', $newLangData, ' ', $oldGloss, ' ', $newGloss,' ',$path)"/>
                <cfg:set variable="parameter" expression="%_" plainString="true"/>
                <!--                <cfg:get expression="$parameter"/>
                    <cfg:command name="alert" parameter="XXE: parameter = %_"/>
                -->
                <cfg:get expression="$parameter"/>
                <cfg:command name="changeLangAttributesInDocumentCmd" parameter="%_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ChangeDefaultLangAttributesInTemplates">
        <cfg:macro trace="false">
            <cfg:sequence>
                <!--                <cfg:command name="prompt" parameter="'Old langData default name (no spaces, just letters)' 'lVernacular'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.changeDefaultLangAttributesInTemplates1"/>
                <cfg:command name="prompt" parameter="'%_' 'lVernacular'"/>
                <cfg:set variable="oldLangData" expression="%_" plainString="true"/>
                <!--                <cfg:command name="prompt" parameter="'New langData default name (no spaces, just letters)' 'lVernacular'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.changeDefaultLangAttributesInTemplates2"/>
                <cfg:command name="prompt" parameter="'%_' 'lVernacular'"/>
                <cfg:set variable="newLangData" expression="%_" plainString="true"/>
                <!--                <cfg:command name="prompt" parameter="'Old gloss default name (no spaces, just letters)' 'lGloss'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.changeDefaultLangAttributesInTemplates3"/>
                <cfg:command name="prompt" parameter="'%_' 'lGloss'"/>
                <cfg:set variable="oldGloss" expression="%_" plainString="true"/>
                <!--                <cfg:command name="prompt" parameter="'New gloss default name (no spaces, just letters)' 'lGloss'"/>-->
                <cfg:command name="LocalizeString" parameter="msg.changeDefaultLangAttributesInTemplates4"/>
                <cfg:command name="prompt" parameter="'%_' 'lGloss'"/>
                <cfg:set variable="newGloss" expression="%_" plainString="true"/>
                <cfg:get expression="translate('%{C}',' ','*')"/>
                <cfg:set variable="path" expression="%_" plainString="true"/>
                <cfg:get expression="concat($oldLangData, ' ', $newLangData, ' ', $oldGloss, ' ', $newGloss, ' ',$path)"/>
                <cfg:set variable="parameter" expression="%_" plainString="true"/>
                <!--                <cfg:get expression="$parameter"/>
                <cfg:command name="alert" parameter="XXE: parameter = %_"/>
-->
                <cfg:get expression="$parameter"/>
                <cfg:command name="changeDefaultLangAttributesInTemplatesCmd" parameter="%_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="ctrl"/>
        <cfg:command name="ConvertSelectedTextToObject"/>
    </cfg:binding>
    <cfg:command name="ConvertSelectedTextToObject">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <!-- if no text has been selected, we do not do anything -->
                    <cfg:command name="convert" parameter="object"/>
                </cfg:pass>
                <cfg:command name="convert" parameter="object"/>
                <cfg:command name="setType"/>
                <cfg:command name="moveDotTo" parameter="nextTextNode"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="alt"/>
        <cfg:command name="ConvertSelectedTextToLangData"/>
    </cfg:binding>
    <cfg:command name="ConvertSelectedTextToLangData">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <!-- if no text has been selected, we do not do anything -->
                    <cfg:command name="convert" parameter="langData"/>
                </cfg:pass>
                <cfg:command name="convert" parameter="langData"/>
                <cfg:command name="moveDotTo" parameter="nextTextNode"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="alt shift"/>
        <cfg:command name="ConvertSelectedTextToGloss"/>
    </cfg:binding>
    <cfg:command name="ConvertSelectedTextToGloss">
        <cfg:macro>
            <cfg:sequence>
                <cfg:pass>
                    <!-- if no text has been selected, we do not do anything -->
                    <cfg:command name="convert" parameter="gloss"/>
                </cfg:pass>
                <cfg:command name="convert" parameter="gloss"/>
                <cfg:command name="moveDotTo" parameter="nextTextNode"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:binding>
        <cfg:keyPressed code="F11" modifiers="ctrl alt"/>
        <cfg:command name="ConvertSelectedToEndnote"/>
    </cfg:binding>
    <cfg:command name="ConvertCollectionInfoToCollectionCitation">
        <cfg:macro undoable="true">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:match context="$implicitElement" pattern="*[ancestor-or-self::collection[not(descendant-or-self::collCitation)]]"/>
                    <!--                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] collection"/>-->
                </cfg:pass>
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] collection"/>
                <cfg:command name="ConvertCollectionToCitationCmd"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertProceedingsInfoToProceedingsCitation">
        <cfg:macro undoable="true">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:match context="$implicitElement" pattern="*[ancestor-or-self::proceedings[not(descendant-or-self::procCitation)]]"/>
                    <!--                    <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] proceedings"/>-->
                </cfg:pass>
                <cfg:command name="selectNode" parameter="ancestorOrSelf[implicitElement] proceedings"/>
                <cfg:command name="ConvertProceedingsToCitationCmd"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="URIConvertFileNameToURI">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="prompt" parameter="'Convert file name to URI' 'Key or copy in the file name'"/>
                <!--                <cfg:set variable="oldLangData" expression="%_" plainString="true"/>-->
                <cfg:command name="ConvertFileNameToURICmd" parameter="%_"/>
                <!--                <cfg:command name="alert" parameter="%_"/>-->
                <cfg:set variable="clipboard" expression="%_" plainString="true"/>
                <cfg:command name="alert" parameter="You can now paste the converted file name into the appropriate attribute."/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="SetTableSize">
        <cfg:macro repeatable="true" undoable="true">
            <cfg:sequence>
                <cfg:pass>
                    <!--                    <cfg:match context="$implicitElement" pattern="table"/>-->
                    <cfg:match context="$implicitElement" pattern="*[ancestor-or-self::table]"/>
                </cfg:pass>
                <!--                Need to do following twice in case the current node is text-->
                <cfg:command name="selectNode" parameter="ancestorOrSelfOrNode table"/>
                <cfg:command name="selectNode" parameter="ancestorOrSelfOrNode table"/>
                <cfg:set variable="columns" expression="count($implicitElement/tr[position()=last()]/td)"/>
                <!--                <cfg:get expression="$columns"/>
                <cfg:command name="alert" parameter="Columns = %_"/>-->
                <cfg:set variable="headers" expression="count($implicitElement/tr[th][not(td)])"/>
                <!--<cfg:get expression="$headers"/>
                <cfg:command name="alert" parameter="Headers = %_"/>-->
                <cfg:set variable="nonheaders" expression="count($implicitElement/tr[td])"/>
                <!--<cfg:get expression="$nonheaders"/>
                <cfg:command name="alert" parameter="Nonheaders = %_"/>-->
                <cfg:set variable="params" expression="concat($headers,'|', $nonheaders, ':', $columns)"/>
                <!--<cfg:get expression="$params"/>
                <cfg:command name="alert" parameter="Params = %_"/>-->
                <cfg:get expression="$params"/>
                <cfg:command name="SetTableSizeCmd" parameter="%_"/>
                <cfg:set variable="result" expression="%_" plainString="true"/>
                <!--<cfg:get expression="$result"/>
                <cfg:command name="alert" parameter="Result= %_"/>-->
                <cfg:get expression="$result"/>
                <cfg:get expression="substring-before('%_','|')"/>
                <cfg:set variable="headerRowsToAdd" expression="%_" plainString="true"/>
                <!--<cfg:get expression="$headerRowsToAdd"/>
                <cfg:command name="alert" parameter="HeaderRows to add= %_"/>-->
                <cfg:get expression="$result"/>
                <cfg:get expression="substring-before(substring-after('%_','|'),':')"/>
                <cfg:set variable="nonheaderRowsToAdd" expression="%_"/>
                <!--<cfg:get expression="$nonheaderRowsToAdd"/>
                <cfg:command name="alert" parameter="NonheaderRows to add= %_"/>-->
                <cfg:get expression="$result"/>
                <cfg:get expression="substring-after('%_',':')"/>
                <cfg:set variable="columnsToAdd" expression="%_" plainString="true"/>
                <!--<cfg:get expression="$columnsToAdd"/>
                <cfg:command name="alert" parameter="Columns to add= %_"/>-->
                <!-- insert any (extra) header rows -->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="firstChild tr"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="firstChild caption"/>
                        <cfg:command name="selectNode" parameter="nextSibling"/>
                    </cfg:sequence>
                </cfg:choice>
                <!--                <cfg:command name="alert" parameter="After select first tr for headers"/>-->
                <cfg:set variable="headersInFirstRow" expression="count($implicitElement/th[not(following-sibling::td)])"/>
                <cfg:get expression="$headersInFirstRow"/>
                <cfg:choice>
                    <cfg:sequence>
                        <!-- existing header -->
                        <cfg:pass>
                            <cfg:test expression="number(%_) &gt; 0"/>
                        </cfg:pass>
                        <!--                        <cfg:command name="alert" parameter="Have an existing header"/>-->
                        <cfg:command name="xhtml.tableEdit" parameter="copyRow"/>
                        <cfg:get expression="$headerRowsToAdd"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <!-- Have an existing header and need to insert more header rows -->
                                <cfg:pass>
                                    <cfg:test expression="number(%_) &gt; 0"/>
                                </cfg:pass>
                                <cfg:command name="InsertHeaderRows" parameter="%_"/>
                                <cfg:command name="selectNode" parameter="parent"/>
                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- Have an existing headder, but nothing to insert -->
                                <cfg:command name="selectNode" parameter="parent"/>
                            </cfg:sequence>
                        </cfg:choice>
                        <cfg:command name="InsertHeaderRows" parameter="%_"/>
                        <cfg:command name="selectNode" parameter="parent"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:get expression="$headerRowsToAdd"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <!-- no existing header, but we need to insert some header rows -->
                                <cfg:pass>
                                    <cfg:test expression="number(%_) &gt; 0"/>
                                </cfg:pass>
                                <!-- NB: this inserts one new header row; what if we need 2 or 3? -->
                                <!--                                <cfg:command name="alert" parameter="No existing header; add one"/>-->
                                <cfg:command name="xhtml.tableEdit" parameter="insertRowBefore"/>
                                <cfg:set variable="cellsInFirstRow" expression="count($implicitElement/td)"/>
                                <cfg:command name="selectNode" parameter="child"/>
                                <cfg:get expression="$cellsInFirstRow"/>
                                <cfg:command name="convertTdToTh" parameter="%_"/>
                                <cfg:command name="selectNode" parameter="parent"/>
                                <!--                                <cfg:command name="alert" parameter="After inserting new header and changing its tds to ths"/>-->
                                <cfg:get expression="$headerRowsToAdd"/>
                                <cfg:choice>
                                    <cfg:sequence>
                                        <cfg:pass>
                                            <cfg:test expression="number(%_) &gt; 1"/>
                                        </cfg:pass>
                                        <cfg:command name="xhtml.tableEdit" parameter="copyRow"/>
                                        <cfg:get expression="$headerRowsToAdd"/>
                                        <cfg:command name="InsertHeaderRows" parameter="string(number(%_)-1)"/>
                                        <cfg:command name="selectNode" parameter="parent"/>
                                    </cfg:sequence>
                                    <cfg:sequence>
                                        <cfg:command name="selectNode" parameter="parent"/>
                                        <!--                                        <cfg:command name="alert" parameter="After selecting parent"/>-->
                                    </cfg:sequence>
                                </cfg:choice>

                            </cfg:sequence>
                            <cfg:sequence>
                                <!-- nothing to do; reset selection to the table -->
                                <!--                                <cfg:command name="alert" parameter="No existing header and no need to add one"/>-->
                                <cfg:command name="selectNode" parameter="parent"/>
                            </cfg:sequence>
                        </cfg:choice>
                    </cfg:sequence>
                </cfg:choice>
                <!-- insert any extra non-header rows -->
                <!--                <cfg:command name="alert" parameter="After handling any headers"/>-->
                <cfg:command name="selectNode" parameter="lastChild"/>
                <!--                <cfg:command name="alert" parameter="After last child"/>-->
                <cfg:command name="xhtml.tableEdit" parameter="copyRow"/>
                <cfg:get expression="$nonheaderRowsToAdd"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:pass>
                            <cfg:test expression="number(%_) &gt; 0"/>
                        </cfg:pass>
                        <cfg:command name="InsertHeaderRows" parameter="%_"/>
                        <!--                        <cfg:command name="alert" parameter="After InsertHeaderRows call"/>-->
                        <cfg:command name="selectNode" parameter="parent"/>
                        <!--                        <cfg:command name="alert" parameter="After select parent"/>-->
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="parent"/>
                        <!--                        <cfg:command name="alert" parameter="After select parent one"/>-->
                    </cfg:sequence>
                </cfg:choice>
                <!-- insert any extra columns -->
                <!--                <cfg:command name="alert" parameter="After handling non-headers"/>-->
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="firstChild tr"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="firstChild caption"/>
                        <cfg:command name="selectNode" parameter="nextSibling"/>
                    </cfg:sequence>
                </cfg:choice>
                <!--                <cfg:command name="alert" parameter="After getting first tr for columns"/>-->
                <cfg:command name="selectNode" parameter="lastChild"/>
                <cfg:command name="xhtml.tableEdit" parameter="copyColumn"/>
                <cfg:get expression="$columnsToAdd"/>
                <cfg:command name="InsertColumns" parameter="%_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="convertTdToTh">
        <cfg:macro trace="false" undoable="true" repeatable="true">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:test expression="number(%0) &gt; 0"/>
                </cfg:pass>
                <cfg:command name="convert" parameter="[implicitElement] th"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="nextSibling"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--  do nothing -->
                        <cfg:command name="selectNode" parameter="self"/>
                    </cfg:sequence>
                </cfg:choice>
                <cfg:command name="convertTdToTh" parameter="number(%0)-1"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="InsertHeaderRows">
        <cfg:macro trace="false" undoable="true" repeatable="true">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:test expression="number(%0) &gt; 0"/>
                </cfg:pass>
                <cfg:command name="xhtml.tableEdit" parameter="pasteRowAfter"/>
                <cfg:command name="InsertHeaderRows" parameter="number(%0)-1"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="InsertColumns">
        <cfg:macro trace="false" undoable="true" repeatable="true">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:test expression="number(%0) &gt; 0"/>
                </cfg:pass>
                <cfg:command name="xhtml.tableEdit" parameter="pasteColumnAfter"/>
                <cfg:command name="InsertColumns" parameter="number(%0)-1"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="UseThisContentControlChoice">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="putAttribute" parameter="active  yes"/>
                <cfg:command name="SetPreviousContentControlChoiceOff"/>
                <cfg:command name="SetNextContentControlChoiceOff"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="SetPreviousContentControlChoiceOff">
        <!-- We recursively move through all previous content control choice elements and make sure
                their active attribute is set to no.  We also need to move the current selection back each time. -->
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="previousSibling"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:command name="putAttribute" parameter="active  no"/>
                                <!--                                <cfg:command name="alert" parameter="Previous: After setting active to no"/>-->
                            </cfg:sequence>
                            <cfg:sequence>
                                <!--                                <cfg:command name="alert" parameter="Previous: Could not set active to no"/>-->
                                <!-- following is a no op -->
                                <cfg:command name="selectNode" parameter="self"/>
                            </cfg:sequence>
                        </cfg:choice>
                        <cfg:command name="SetPreviousContentControlChoiceOff"/>
                        <cfg:command name="selectNode" parameter="nextSibling"/>
                        <!--                        <cfg:command name="alert" parameter="Previous: After next sibling"/>-->
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="alert" parameter="Previous: in no op"/>-->
                        <!-- following is a no op -->
                        <cfg:command name="selectNode" parameter="self"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="SetNextContentControlChoiceOff">
        <!-- We recursively move through all following content control choice elements and make sure
            their active attribute is set to no.  We also need to move the current selection back each time. -->
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:command name="selectNode" parameter="nextSibling"/>
                        <cfg:choice>
                            <cfg:sequence>
                                <cfg:command name="putAttribute" parameter="active  no"/>
                                <!--                                <cfg:command name="alert" parameter="Next: After setting active to no"/>-->
                            </cfg:sequence>
                            <cfg:sequence>
                                <!--                                <cfg:command name="alert" parameter="Next: Could not set active to no"/>-->
                                <!-- following is a no op -->
                                <cfg:command name="selectNode" parameter="self"/>
                            </cfg:sequence>
                        </cfg:choice>
                        <cfg:command name="SetNextContentControlChoiceOff"/>
                        <cfg:command name="selectNode" parameter="previousSibling"/>
                        <!--                        <cfg:command name="alert" parameter="Next: After previous sibling"/>-->
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="alert" parameter="Next: in no op"/>-->
                        <!-- following is a no op -->
                        <cfg:command name="selectNode" parameter="self"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="CreateZipFile">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="GetXIncludesAndImageFiles"/>
                <cfg:command name="CreateZipFileCmd" parameter="%P|%R.zip|%D|%_"/>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="GetXIncludesAndImageFiles">
        <cfg:macro>
            <cfg:sequence>
                <cfg:command name="GetXIncludesAndImageFilesCmd" parameter="%D|%P"/>
                <!--                <cfg:command name="alert" parameter="%_"/>-->
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="UseShorterMenus">
        <cfg:process>
            <cfg:copy files="%{C}%{S}menusShorter.xml" to="%{C}%{S}menus.xml" quiet="true"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="UseLongerMenus">
        <cfg:process>
            <cfg:copy files="%{C}%{S}menusLonger.xml" to="%{C}%{S}menus.xml" quiet="true"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="PaperToChapterInCollection">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <!-- needs to be a paper, not a book -->
                        <cfg:test context="//lingPaper" expression="descendant::chapter or descendant::chapterInCollection"/>
                        <cfg:command name="LocalizeString" parameter="msg.mustBePaper"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:set variable="newFileName" expression="concat('%{P}%{S}%{R}','AsChapterInCollection','.','%{E}')"/>
                        <!--<cfg:get expression="$newFileName"/>
                            <cfg:command name="alert" parameter="%_"/>-->
                        <cfg:get expression="$newFileName"/>
                        <cfg:command name="ConvertPaperToChapterInCollectionTransform" parameter="%_"/>
                        <cfg:get expression="$newFileName"/>
                        <cfg:command name="XXE.open" parameter="%_"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertPaperToChapterInCollectionTransform">
        <cfg:process showProgress="false">
            <cfg:transform cacheStylesheet="true" file="%{D}" stylesheet="../transforms/ConvertPaperToChapterInCollection.xsl" to="%*"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="PaperToChapter">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <!-- needs to be a paper, not a book -->
                        <cfg:test context="//lingPaper" expression="descendant::chapter or descendant::chapterInCollection"/>
                        <cfg:command name="LocalizeString" parameter="msg.mustBePaper"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:set variable="newFileName" expression="concat('%{P}%{S}%{R}','AsChapter','.','%{E}')"/>
                        <!--<cfg:get expression="$newFileName"/>
                            <cfg:command name="alert" parameter="%_"/>-->
                        <cfg:get expression="$newFileName"/>
                        <cfg:command name="ConvertPaperToChapterTransform" parameter="%_"/>
                        <cfg:get expression="$newFileName"/>
                        <cfg:command name="XXE.open" parameter="%_"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="ConvertPaperToChapterTransform">
        <cfg:process showProgress="false">
            <cfg:transform cacheStylesheet="true" file="%{D}" stylesheet="../transforms/ConvertPaperToChapter.xsl" to="%*"/>
        </cfg:process>
    </cfg:command>
    <cfg:command name="ConvertSelectedToEndnote">
        <cfg:macro undoable="true" trace="false">
            <cfg:sequence>
                <cfg:pass>
                    <cfg:command name="cut" parameter="[implicit_selection]"/>
                    <cfg:command name="selectNode" parameter="self[implicitElement] p pc secTitle hangingIndent li blockquote title subtitle q dt dd interlinearSource wrd free langData gloss literal th td exampleHeading textTitle source genre caption endCaption affiliation presentedAt chart definition keyTerm genericRef link publishingBlurb author item"/>
                </cfg:pass>
                <cfg:command name="cut" parameter="[implicit_selection]"/>
                <cfg:command name="insert" parameter="into endnote"/>
                <cfg:command name="paste" parameter="into"/>
                <cfg:command name="toggleCollapsed" parameter="expand"/>
            </cfg:sequence> 
        </cfg:macro>
    </cfg:command>
    <cfg:command name="TableToXLingPaper">
        <cfg:macro trace="false">
            <cfg:sequence>
                <cfg:command name="GetHtmlTableFromClipboardCmd" parameter="%{P}%{S}XLingPaperTempTable.html"/>
                <cfg:set variable="result" plainString="true" expression="%_"/>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="string-length($result) > 0"/>
<!--                        <cfg:command name="alert" parameter="after command"/>-->
                        <cfg:command name="CleanUpConvertedTable"/>
<!--                        <cfg:command name="alert" parameter="After xsl"/>-->
                        <cfg:command name="SetHtmlTableToClipboardCmd" parameter="%{P}%{S}XLingPaperTempTableCleaned.html"/>
<!--                        <cfg:command name="alert" parameter="After set clipboard"/>-->
                        <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}XLingPaperTempTable.html"/>
                        <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}XLingPaperTempTable.xhtml"/>
                        <cfg:command name="DeleteFileCmd" parameter="%{P}%{S}XLingPaperTempTableCleaned.html"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <!--                        <cfg:command name="alert" parameter="Sorry, but the copied material was not recognized as a table."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.tableToXLingPaper"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="CleanUpConvertedTable">
        <cfg:process>
            <cfg:copy files="%{P}%{S}XLingPaperTempTable.xhtml" to="XLingPaperTempTable.xhtml" quiet="true"/>
            <cfg:transform stylesheet="../transforms/ConvertTable.xsl" file="XLingPaperTempTable.xhtml" to="XLingPaperTempTableCleaned.html"/>
            <cfg:copy files="XLingPaperTempTableCleaned.html" to="%{P}%{S}XLingPaperTempTableCleaned.html" quiet="true"/>
        </cfg:process>
    </cfg:command>

    <cfg:command name="AbbreviationListAsWebPage">
        <cfg:macro>
            <cfg:sequence>
                <cfg:choice>
                    <cfg:sequence>
                        <cfg:test expression="not(//abbreviations)"/>
<!--                        <cfg:command name="alert" parameter="Sorry, there are no abbreviations in this document file."/>-->
                        <cfg:command name="LocalizeString" parameter="msg.noAbbreviations"/>
                        <cfg:command name="alert" parameter="%_"/>
                    </cfg:sequence>
                    <cfg:sequence>
                        <cfg:command name="LocalizeString" parameter="param.abbreviationListTitle"/>
                        <cfg:set variable="sTitle" expression="%_" plainString="true"/>
                        <cfg:command name="LocalizeString" parameter="param.abbreviationListAbbreviation"/>
                        <cfg:set variable="sAbbreviation" expression="%_" plainString="true"/>
                        <cfg:command name="LocalizeString" parameter="param.abbreviationListDefinition"/>
                        <cfg:set variable="sDefinition" expression="%_" plainString="true"/>
                        <cfg:command name="LocalizeString" parameter="param.abbreviationListByAbbreviation"/>
                        <cfg:set variable="sByAbbreviation" expression="%_" plainString="true"/>
                        <cfg:command name="LocalizeString" parameter="param.abbreviationListByDefinition"/>
                        <cfg:set variable="sByDefinition" expression="%_" plainString="true"/>
                        <cfg:set variable="sParams" expression="concat('&quot;',$sTitle,'&quot;',' ','&quot;',$sAbbreviation,'&quot;',' ','&quot;',$sDefinition,'&quot;',' ','&quot;',$sByAbbreviation,'&quot;',' ','&quot;',$sByDefinition,'&quot;')"/>
                        <cfg:get expression="$sParams"/>
                        <cfg:command name="applyShowListOfAbbreviationsTransform" parameter="%_"/>
                        <cfg:command name="start" parameter="helper(defaultViewer) &quot;%{P}%{S}abbreviations.htm&quot;"/>
                    </cfg:sequence>
                </cfg:choice>
            </cfg:sequence>
        </cfg:macro>
    </cfg:command>
    <cfg:command name="applyShowListOfAbbreviationsTransform">
        <cfg:process>
            <cfg:copyDocument to="in.xml"/>
            <cfg:transform file="in.xml" stylesheet="../transforms/ShowListOfAbbreviations.xsl" to="%{P}%{S}abbreviations.htm">
                <cfg:parameter name="sTitle">%0</cfg:parameter>
                <cfg:parameter name="sAbbreviation">%1</cfg:parameter>
                <cfg:parameter name="sDefinition">%2</cfg:parameter>
                <cfg:parameter name="sByAbbreviation">%3</cfg:parameter>
                <cfg:parameter name="sByDefinition">%4</cfg:parameter>
            </cfg:transform>
        </cfg:process>
    </cfg:command>
    
</cfg:configuration>
